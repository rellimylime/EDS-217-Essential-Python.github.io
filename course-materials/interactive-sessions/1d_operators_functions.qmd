---
title: "Interactive Session 1D"
subtitle: "üêç Variables, Operators, and Functions"
jupyter: eds217_2025
format:
  html:
    toc: true
    toc-depth: 3
    code-fold: show
---


::: {style="width: 80%; margin: auto;"}
![variables.jpg](images/variables.jpg)
:::


All programming languages contain the same fundamental tools: `variables`, `operators`, and `functions`. This session covers a first introduction to each of these these basic elements of the Python language.

<p style="height:1pt"> </p>

<div class="boxhead1">
    Session Topics
</div>

<div class="boxtext1">
<ul class="a">
    <li> üìå Numbers: <code>int</code>, <code>float</code> </li>
    <ul class="b">
        <li> Arithmetic operators </li>
        <li> Boolean operators </li>
        <li> Built-in functions for numerical objects </li>
    </ul>
    <li> üìå Strings </li>
    <ul class="b">
        <li> Built-in functions for strings </li>
        <li> Formatted print statements </li>
    </ul>
</ul>
</div>

<hr style="border-top: 0.2px solid gray; margin-top: 12pt; margin-bottom: 0pt"></hr>

## Getting Started

Before we begin our interactive session, please follow these steps to set up your Jupyter Notebook:

1. Open JupyterLab and create a new notebook:
   - Click on the `+` button in the top left corner
   - Select `Python 3.11.0` from the Notebook options

2. Rename your notebook:
   - Right-click on the `Untitled.ipynb` tab (see the note below if you have trouble!)
   - Select "Rename"
   - Name your notebook with the format: `Session_1D_Operators_and_Functions.ipynb`
     (Replace X with the day number and Y with the session number)

:::{.callout-tip title="Right-clicking in JupyterLab"}
Some browsers and operating system combinations will not conceded right-clicking to the JupyterLab interface and will show a system menu when you try to right click. In those cases, usually `CTRL-Right Click` or `OPTION-Right Click` will bring up the Jupyter menu.
:::

3. Add a title cell:
   - In the first cell of your notebook, change the cell type to "Markdown"
   - Add the following content:

```markdown
# Day 1: Session D - Operators & Functions

[Session Webpage](https://eds-217-essential-python.github.io/course-materials/interactive-sessions/1d_operators_functions.html)

Date: 09/03/2024

```

4. Add a code cell:
   - Below the title cell, add a new cell
   - Ensure it's set as a "Code" cell
   - This will be where you start writing your Python code for the session

5. Throughout the session:
   - Take notes in Markdown cells
   - Copy or write code in Code cells
   - Run cells to test your code
   - Ask questions if you need clarification

:::{.callout-caution}
Remember to save your work frequently by clicking the save icon or using the keyboard shortcut (Ctrl+S or Cmd+S).
:::

Let's begin our interactive session!


## Instructions
We will work through this material together, writing a new notebook as we go.

:::{.callout-note}
üêç &nbsp; &nbsp; This symbol designates an important note about Python structure, syntax, or another quirk.
:::


<p style="color:#008C96; font-weight: bold"> ‚úèÔ∏è &nbsp; &nbsp; This symbol designates code you should add to your notebook and run.  </p>

<hr style="border-top: 1px solid gray; margin-top: 24px; margin-bottom: 1px"></hr>

## Variables + Operators
Variables are used in Python to create references to an object (e.g. string, float, DataFrame, etc.). Variables are assigned in Python using `=`.

:::{.callout-note}
üêç Variable names should be chosen carefully and should indicate what the variable is used for. Python etiquette generally dictates using lowercase variable names. Underscores are common. Variable names cannot start with a number. Also, there are several names that cannot be used as variables, as they are reserved for built-in Python commands, functions, etc. We will see examples of these throughout this session.
:::

<hr style="border-top: 0.2px solid gray; margin-top: 12px; margin-bottom: 1px"></hr>

### Numbers
Numbers in Python can be either **integers** (whole numbers) or **floats** (floating-point decimal numbers).

<div class="example"> 
‚úèÔ∏è Try it. Add the cell below to your notebook and run it.
</div>

```{python}
#| include-output: false
# Define variables x and y as integers.
x = 1
y = 42
```

The following syntax is used to define a float:
```python
a = 1.0
b = 42.0
c = 23.782043
```

<div class="example"> 
‚úèÔ∏è Try it. Create a new cell and define variables a, b, and c according to the values above.
</div>

```{python}
#| include-output: false
# Define variables a, b, and c as floats.
a = 1.0
b = 42.0
c = 23.782043
```

### Arithmetic Operators

Just like a calculator, basic arithmetic can be done on number variables. Python uses the following symbols:

| Symbol | Task           |
| :----: | :---           |
|   +    | Addition       |
|   -    | Subtraction    |
|   *    | Multiplication |
|   /    | Division       |
|   %    | Modulus        |
|  //    | Floor division |
|  **    | Power          |

<div class="example"> 
‚úèÔ∏è  Try it. Practice using arithmetic operations by running the code in a new cell. Feel free to add more to test the operators. Use the <code>print()</code> command to output your answers.
</div>

```{python}

# Do some math and print the results!

```

Notice that the order of operations applies.

### Compound Assignment Operators

Compound assignment operators combine an arithmetic or bitwise operation with assignment in a single statement. They provide a concise way to update a variable's value based on its current value.

#### Examples

```{python}
#| echo: true
# Initialize a variable
count = 10

# Decrement using compound assignment
count -= 1
print(f"After count -= 1: {count}")  # Output: 9

# Increment using compound assignment
count += 2
print(f"After count += 2: {count}")  # Output: 11

# Multiply using compound assignment
count *= 3
print(f"After count *= 3: {count}")  # Output: 33
```

#### Exercise

Complete the following code to achieve the desired output:

```{python}
# Initialize the score
score = 100

# TODO: Use compound assignment to decrease the score by 15
# Your code here

# TODO: Use compound assignment to double the score
# Your code here

# TODO: Use compound assignment to divide the score by 5
# Your code here

print(f"Final score: {score}")  # Expected output: 34.0
```


```{python}
#| echo: false
#| include: false 
# Solution (Run this cell to reveal the answer)
score = 100

score -= 15  # Decrease by 15
score *= 2   # Double the score
score /= 5   # Divide by 5

print(f"Final score: {score}")  # Output: 34.0
```

Try modifying the initial `score` value or the operations to see how the result changes!

### Boolean Operators

Boolean operators evaluate a condition between two operands, returning `True` if the condition is met and `False` otherwise. `True` and `False` are called **booleans**.

| Symbol | Task                     |
| :----: | :----------------------  |
|   ==   | Equals                   |
|  !=    | Does not equal           |
|   <    | Less than                |
|   >    | Greater than             |
|   <=   | Less than or equal to    |
|   >=   | Greater than or equal to |

<div class="example">
‚úèÔ∏è Try it. Enter and Run the cell below in your .ipynb file.
</div>

```{python}
#| include-output: false
print(b >= a)
print(87 < -2)
print(c != 0)
print(y == x)
```

<h4 style="border:1px; border-style:solid; border-color:black; padding: 0.5em;"> <span style="color:black"> Built-in Functions </span> </h4>

Python has a number of built-in functions. Here we will introduce a few of the useful built-in functions for numerical variables.

The `type()` function is used to check the data type of a variable. For numerical arguments, either `float` or `int` is returned.

<div class="example">
‚úèÔ∏è Try it. Enter and Run the cell below in your .ipynb file.
</div>

```{python}
#| include-output: false
print(type(x))
print(type(c))
```

The `isinstance()` function is used to determine whether an argument is in a certain class. It returns a boolean value. Multiple classes can be checked at once.

```python
isinstance(12, int)
>>> True

isinstance(12.0, int)
>>> False

isinstance(12.0, (int, float))
>>> True
```

The commands `int()` and `float()` are used to convert between data types.

<div class="example">
‚úèÔ∏è Try it. Enter and Run the cell below in your .ipynb file.
</div>

```{python}
#| include-output: false
print(float(y))
print(int(c))
```

Notice that when converting a float value to an integer, the `int()` command always rounds *down* to the nearest whole number.

To round a float to the nearest whole number, use the function `round()`. You can specify the number of decimal places by adding an integer as an argument to the `round()` function.

<div class="example">
‚úèÔ∏è Try it. Enter and Run the cell below in your .ipynb file.
</div>

```{python}
#| include-output: false
print(round(c))
print(round(c, 3))
```

To return the absolute value of a number, use the `abs()` function.

<div class="example">
‚úèÔ∏è Try it. Enter and Run the cell below in your .ipynb file.
</div>

```{python}
#| include-output: false
print(abs(c))
print(abs(-12))
```


The `pow()` function is an alternative to the `**` operator for raising a number to an exponent, i.e. $x^y$. 


<div class="example">
‚úèÔ∏è Try it. Enter and Run the cell below in your .ipynb file.
</div>
```{python}
pow(8, 2)
```


<hr style="border-top: 0.2px solid gray; margin-top: 12px; margin-bottom: 1px"></hr>

## Strings
Pieces of text in Python are referred to as strings. Strings are defined with either single or double quotes. The only difference between the two is that it is easier to use an apostrophe with double quotes.


<div class="example">
‚úèÔ∏è Try it. Enter and Run the cell below in your .ipynb file.
</div>
```{python}
mytext = 'This is a string.'
mytext2 = "This is also a string."
```

To use an apostrophe or single quotes inside a string defined by single quotes (or to use double quotes), use a single backslash ( \\ ) referred to as an "escape" character.


<div class="example">
‚úèÔ∏è Try it. Enter and Run the cell below in your .ipynb file.
</div>

```{python}
q1a = "What is Newton's 1st law of motion?"
q1b = 'What is Newton\'s 1st law of motion?'

# Are q1a and q1b the same?
q1a == q1b
```

Python has multi-line strings as well, which you can use when documenting your code or handling large quotes or chunks of text. Multi-line strings are started with three quotes (`"""`) and terminated with three quotes (`"""`):


<div class="example">
‚úèÔ∏è Try it. Enter and Run the cell below in your .ipynb file.
</div>
```{python}
# l(a or (A leaf falls on loneliness) by e.e. cummings
la = """
l(a
le
af
fa
ll
s)
one
l
iness
"""
```

Multi-line formatting is preserved in multi-line strings:

<div class="example">
‚úèÔ∏è Try it. Enter and Run the cell below in your .ipynb file.
</div>
```{python}
print(la)
```


### String Built-in Functions

Just like the `int()` and `float()` commands, the `str()` command converts a number to a string.

<div class="example">
‚úèÔ∏è Try it. Enter and Run the cell below in your .ipynb file.
</div>

```{python}
ystr = str(y)
```

The `+` operator can be used to combine two or more strings.

<div class="example">
‚úèÔ∏è Try it. Enter and Run the cell below in your .ipynb file.
</div>

```{python}
s = 'isaac' + ' ' + 'newton'
```

The commands `string.upper()` and `string.capitalize()` can be used to convert all letters in the string to uppercase and capitalize the first letter in the string, respectively.

<div class="example">
‚úèÔ∏è Try it. Enter and Run the cell below in your .ipynb file.
</div>

```{python}
print(s.upper())
print(s.capitalize())
```

## Formatted Print Statements

Python's f-string formatting provides an efficient and readable way to create formatted strings. This is useful for printing variables, formatting numerical output, and displaying messages. 

### Using f-strings

To use an f-string, place an `f` before the opening quotation mark of a string literal, and then include variables inside curly braces `{}`.


<div class="example">
‚úèÔ∏è Try it. Enter and Run the cell below in your .ipynb file.
</div>

```{python}
name = "Alice"
age = 30

# Example of an f-string
print(f"My name is {name} and I am {age} years old.")
```

### Formatting Numbers

You can also format numbers, especially floating-point numbers, within f-strings by specifying format specifiers inside the curly braces:

- **Fixed Point**: Use `.nf` to display a float with `n` decimal places.


<div class="example">
‚úèÔ∏è Try it. Enter and Run the cell below in your .ipynb file.
</div>

```{python}
pi = 3.141592653589793

# Format to 2 decimal places
print(f"The value of pi is approximately {pi:.2f}.")
```

- **Width and Alignment**: Use formatting options to align text or numbers.


<div class="example">
‚úèÔ∏è Try it. Enter and Run the cell below in your .ipynb file.
</div>

```{python}
value = 123.456
print(f"Value aligned to 10 spaces: |{value:10.2f}|")
```


<hr style="border-top: 1px solid gray; margin-top: 24px; margin-bottom: 1px"></hr>


::: {.center-text .body-text-xl .teal-text}
End interactive session 1D
:::
