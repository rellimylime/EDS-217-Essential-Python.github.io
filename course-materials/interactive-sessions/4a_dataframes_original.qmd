---
title: "Interactive Session 4A"
subtitle: "DataFrames"
editor_options: 
  chunk_output_type: console
jupyter: eds217_2025
format: 
    html:
        toc: true
        toc-depth: 3
        code-fold: show
---



::: {style="width: 60%; margin: auto;"}
![](images/dataframe.jpeg)
:::

:::{.gray-text .center-text}
*A cartoon panda in a frame shop.* [MidJourney 5](https://www.midjourney.com/jobs/f7787b1d-a02e-488c-932e-42a5e6c43a47?index=0)
:::

## Getting Started

Before we begin our interactive session, please follow these steps to set up your Jupyter Notebook:

1. Open JupyterLab and create a new notebook:
   - Click on the `+` button in the top left corner
   - Select `Python 3.11.0` from the Notebook options

2. Rename your notebook:
   - Right-click on the `Untitled.ipynb` tab
   - Select "Rename"
   - Name your notebook with the format: `Session_XY_Topic.ipynb`
     (Replace X with the day number and Y with the session number)

3. Add a title cell:
   - In the first cell of your notebook, change the cell type to "Markdown"
   - Add the following content (replace the placeholders with the actual information):

```markdown
# Day 4: Session A - Dataframes

[Link to session webpage](https://eds-217-essential-python.github.io/course-materials/interactive-sessions/4a_dataframes_original.html)

Date: 09/05/2025

```

4. Add a code cell:
   - Below the title cell, add a new cell
   - Ensure it's set as a "Code" cell
   - This will be where you start writing your Python code for the session

5. Throughout the session:
   - Take notes in Markdown cells
   - Copy or write code in Code cells
   - Run cells to test your code
   - Ask questions if you need clarification

:::{.callout-caution}
Remember to save your work frequently by clicking the save icon or using the keyboard shortcut (Ctrl+S or Cmd+S).
:::

Let's begin our interactive session!
<hr>


## Introduction to pandas DataFrames

In this interactive session, we'll explore the fundamental concepts of pandas DataFrames, their relationship to Series, and some essential methods for working with them.

## Instructions
We will work through this material together, writing a new notebook as we go.

:::{.callout-note}
üêç &nbsp; &nbsp; This symbol designates an important note about Python structure, syntax, or another quirk.
:::


<p style="color:#008C96; font-weight: bold"> ‚úèÔ∏è &nbsp; &nbsp; This symbol designates code you should add to your notebook and run.  </p>

<hr style="border-top: 1px solid gray; margin-top: 24px; margin-bottom: 1px"></hr>

## Setting up our environment

Let's start by importing the necessary libraries:

<div class="example"> 
‚úèÔ∏è Try it. Add the cell below to your notebook and run it.
</div>

```{python}
#| echo: true

import pandas as pd
import numpy as np
```

## Understanding Series

Before diving into DataFrames, let's briefly review pandas Series, as they form the building blocks of DataFrames.

<div class="example"> 
‚úèÔ∏è Try it. Add the cell below to your notebook and run it.
</div>

```{python}
#| echo: true

# Creating a Series
s = pd.Series([1, 3, 5, np.nan, 6, 8])
print(s)
```

A Series is a one-dimensional labeled array that can hold data of any type.

## Introduction to DataFrames

A DataFrame is a two-dimensional labeled data structure with columns of potentially different types. You can think of it as a table or a spreadsheet-like structure.

Let's create a simple DataFrame:

<div class="example"> 
‚úèÔ∏è Try it. Add the cell below to your notebook and run it.
</div>

```{python}
#| echo: true

# Creating a DataFrame
df = pd.DataFrame({
    'A': [1, 2, 3, 4],
    'B': pd.date_range(start='2023-01-01', periods=4),
    'C': pd.Series(1, index=list(range(4)), dtype='float32'),
    'D': np.array([3] * 4, dtype='int32'),
    'E': pd.Categorical(["test", "train", "test", "train"]),
    'F': 'foo'
})

print(df)
```

Here, we've created a DataFrame with different types of data: integers, dates, floats, categories, and strings.

## DataFrames and Series Relationship

Each column in a DataFrame is a Series. You can access a column like this:

<div class="example"> 
‚úèÔ∏è Try it. Add the cell below to your notebook and run it.
</div>

```{python}
#| echo: true

print(df['A'])
```

This returns a Series object. You can confirm this:

<div class="example"> 
‚úèÔ∏è Try it. Add the cell below to your notebook and run it.
</div>

```{python}
#| echo: true

print(type(df['A']))
```

## Investigating DataFrame Structure

pandas provides several methods to investigate the structure of a DataFrame:

### 1. Shape

To get the dimensions of the DataFrame:

<div class="example"> 
‚úèÔ∏è Try it. Add the cell below to your notebook and run it.
</div>

```{python}
#| echo: true

print(df.shape)
```

This returns a tuple where the first element is the number of rows, and the second is the number of columns.

### 2. Info

For a concise summary of the DataFrame:

<div class="example"> 
‚úèÔ∏è Try it. Add the cell below to your notebook and run it.
</div>

```{python}
#| echo: true

df.info()
```

This method prints information about the DataFrame including the index dtype and columns, non-null values and memory usage.

### 3. Dtypes

To see the data types of each column:

<div class="example"> 
‚úèÔ∏è Try it. Add the cell below to your notebook and run it.
</div>

```{python}
#| echo: true

print(df.dtypes)
```

### 4. Describe

To see some basic statistical details of numerical columns:

<div class="example"> 
‚úèÔ∏è Try it. Add the cell below to your notebook and run it.
</div>

```{python}
#| echo: true

print(df.describe())
```

## Accessing DataFrame Contents

There are multiple ways to access data within a DataFrame. The easiest and most direct way is to use the `head()` and `tail()` command. The `head()` method shows the first (`tail()` shows the last) 10 values by default (if no argument is provided). If you provide a number to the command, then that is the number of values returned.

### 1. Head and Tail

To view the first or last few rows:

<div class="example"> 
‚úèÔ∏è Try it. Add the cell below to your notebook and run it.
</div>

```{python}
#| echo: true

print(df.head(2))  # First 2 rows
print("\n")
print(df.tail(2))  # Last 2 rows
```

### 2. Indexing

You can access rows and columns using various indexing methods:

<div class="example"> 
‚úèÔ∏è Try it. Add the cell below to your notebook and run it.
</div>


```{python}
#| echo: true

# Selecting a single column
print(df['A'])

# Selecting multiple columns
print(df[['A', 'B']])

# Selecting rows by position
print(df.iloc[0])  # First row

# Selecting rows by label
print(df.loc[0])  # First row (assuming default integer index)

# Selecting both rows and columns
print(df.loc[0, 'A'])  # Value at first row of column 'A'
```

## Basic DataFrame Operations

Let's look at some basic operations you can perform on DataFrames:

### 1. Adding a new column

<div class="example"> 
‚úèÔ∏è Try it. Add the cell below to your notebook and run it.
</div>

```{python}
#| echo: true

df['G'] = df['A'] + df['D']
print(df)
```

### 2. Applying functions to columns

Let's define a simpe function and use `apply` to apply that function to every row in a column:

<div class="example"> 
‚úèÔ∏è Try it. Add the cell below to your notebook and run it.
</div>


```{python}
#| echo: true

def square(x):
    return x ** 2

df['A_squared'] = df['A'].apply(square)
print(df)
```

### 3. Basic statistics

<div class="example"> 
‚úèÔ∏è Try it. Add the cell below to your notebook and run it.
</div>

```{python}
#| echo: true

print(df['A'].mean())  # Mean of column A
print(df['D'].sum())   # Sum of column D
```

## Conclusion

This session introduced you to the basics of pandas DataFrames, their relationship to Series, and some fundamental methods for exploring and manipulating them. 

In future sessions, we'll dive deeper into more advanced operations like selection, filtering, grouping, and data cleaning.

Remember, DataFrames are powerful tools for data manipulation and analysis, built upon the concept of Series. 

Understanding their structure and basic operations is crucial for effective data analysis with pandas.

- [Pandas Cheat Sheet](Pandas_Cheat_Sheet.pdf)
- [DataFrame Cheatsheet](../cheatsheets/pandas_dataframes.qmd)

::: {.center-text .body-text-xl .teal-text}
End interactive session 4A
:::
