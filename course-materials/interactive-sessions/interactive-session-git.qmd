---
title: "Sidebar"
subtitle: "Setting up Git for Jupyter Notebooks"
editor_options: 
  chunk_output_type: console
jupyter: eds217_2025
format:
  html:
    toc: true
    toc-depth: 3
    code-fold: show
---

![Welcome to git (xkcd)](https://imgs.xkcd.com/comics/git_2x.png){width=00}

## 1. Setting up `git` for collaborating with Notebooks

### Cleaning Up Jupyter Notebook Files Before Committing to Git

In data science workflows, particularly when collaborating using Jupyter Notebooks, it's important to maintain a clean and efficient Git repository. This guide will help you set up your environment to automatically remove outputs from `.ipynb` files before committing them, which improves collaboration and reduces repository size.

### Why Clean Up `.ipynb` Files?

- **Reduced Size**: Outputs can bloat file sizes, making repositories larger and slower to clone.
- **Fewer Conflicts**: Output cells can cause merge conflicts when multiple people edit the same file.
- **Encouraged Reproducibility**: Keeping notebooks free of outputs encourages others to run the notebooks themselves.

### Step-by-Step Setup

#### Step 1: Check if `jq` is Installed

1. **Open Terminal**: Access your terminal application.
2. **Check for `jq`**: Run the following command to see if `jq` is installed and check its version:

   ```bash
   jq --version
   ```

3. **Verify Version**: Ensure the output is `jq-1.5` or higher. If `jq` is installed and the version is at least 1.5, you can proceed to the next steps. If not, see the installation note below.

#### Step 2: Configure Git to Use a Global Attributes File

1. **Open `~/.gitconfig`**: Use `nano` to edit this file:

   ```bash
   nano ~/.gitconfig
   ```

2. **Add the Configuration**: Copy and paste the following lines:

   ```plaintext
   [core]
   attributesfile = ~/.gitattributes_global

   [filter "nbstrip_full"]
   clean = "jq --indent 1 \
           '(.cells[] | select(has(\"outputs\")) | .outputs) = []  \
           | (.cells[] | select(has(\"execution_count\")) | .execution_count) = null  \
           | .metadata = {\"language_info\": {\"name\": \"python\", \"pygments_lexer\": \"ipython3\"}} \
           | .cells[].metadata = {} \
           '"
   smudge = cat
   required = true
   ```

3. **Save and Exit**: Press `CTRL + X`, then `Y`, and `Enter` to save the file.

#### Step 3: Create a Global Git Attributes File

1. **Open `~/.gitattributes_global`**: Use `nano` to edit this file:

   ```bash
   nano ~/.gitattributes_global
   ```

2. **Add the Following Line**:

   ```plaintext
   *.ipynb filter=nbstrip_full
   ```

3. **Save and Exit**: Press `CTRL + X`, then `Y`, and `Enter`.

### How This Works

- **`filter "nbstrip_full"`**: This filter uses the `jq` command to strip outputs and reset execution counts in `.ipynb` files.
- **`clean`**: Removes outputs when files are staged for commit.
- **`smudge`**: Ensures the original content is restored upon checkout.
- **`required`**: Enforces the use of the filter for the specified files.

### Benefits for Python Environmental Data Science Workflows

- **Efficiency**: Smaller files mean faster repository operations.
- **Collaboration**: Fewer conflicts facilitate teamwork.
- **Reproducibility**: Encourages consistent execution across environments.

---

## Optional: Installing `jq`

If `jq` is not installed or needs to be updated, follow these instructions for your operating system.

### Windows

1. **Download `jq`**:
   - Visit the [jq downloads page](https://stedolan.github.io/jq/download/) and download the Windows executable (`jq-win64.exe`).

2. **Add to PATH**:
   - Move the `jq-win64.exe` to a directory included in your system’s PATH or rename it to `jq.exe` and place it in `C:\Windows\System32`.

3. **Verify Installation**:
   - Open Command Prompt and run `jq --version` to ensure it’s correctly installed.

### macOS

1. **Using Homebrew**:
   - Homebrew is a package manager for macOS that simplifies the installation of software. It's widely used for installing command-line tools and other utilities. If you don't have Homebrew installed, you can follow the instructions on the [Homebrew website](https://brew.sh/).

   - Once Homebrew is installed, open Terminal and run the following command to install `jq`:

     ```bash
     brew install jq
     ```

2. **Verify Installation**:
   - Run `jq --version` to confirm it is installed and at least version 1.5.

By following these steps, you ensure that your Jupyter Notebook files remain clean and efficient within your Git repositories, enhancing collaboration and reproducibility in your workflows.

---

### Additional Note

For Linux users, you can typically install `jq` using your package manager, such as `apt` on Debian-based systems or `yum` on Red Hat-based systems:

```bash
# Debian-based systems
sudo apt-get install jq

# Red Hat-based systems
sudo yum install jq
```
<br>

::: {.center-text .body-text-xl .teal-text}
End interactive session 2A
:::
