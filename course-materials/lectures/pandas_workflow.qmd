---
title: "Efficient Data Workflows in Pandas"
jupyter: eds217_2025
format: revealjs
---

# An 8-Step Data Science Workflows in Pandas

When doing data science, you usually conduct at least 3 or 4 of the following steps:

Load ‚û°Ô∏è Clean ‚û°Ô∏è Transform ‚û°Ô∏è Combine ‚û°Ô∏è Group/Aggregate ‚û°Ô∏è Summarize ‚û°Ô∏è Export ‚û°Ô∏è Visualize

![](assets/workflows_panads.png)

___

#### The `pandas` library contains many different functions corresponding to each of these steps. 

As you learn data science, it helps to think about 

_what types of functions are most essential for each step_. 

---

#### The `pandas` library contains many different functions corresponding to each of these steps. 

As you encounter new pandas functions, it will also be helpful to think about

_which of these steps the function was created to assist with_. 

--- 

Let's walk through each of these eight steps, take a look at the main pandas functions used in each one, and some examples of how they are used. 

---

We will use [Pandas Tutor](https://pandastutor.com) links to get deeper insight into how these functions affect our dataframes. The "üêçüß†" links in our slides will take us to a Pandas Tutor explanation of the code.

---

At the end of this lecture, we'll learn about a concept called "method chaining" that allows you to combine these steps as part of your pandas data science workflow.

---

## 1. Data Loading

### Importance
Loading data properly is essential! It serves as the foundation for all subsequent operations.

### Common Operations
- `read_csv()`
- `read_excel()`
- `read_sql()`

---

### Example: Loading a Dataframe

```{python}
#| echo: true
import pandas as pd

# URL of the CSV file (using parentheses to span multiple lines)
url = ('https://archive.ics.uci.edu/ml/machine-learning-databases'+
       '/wine-quality/winequality-red.csv')

# Use read_csv to load the data directly from the URL
# Note: The dataset uses ';' as a separator
df = pd.read_csv(url, sep=';')

```

---

```{python}
#| echo: true
# Display the first few rows of the DataFrame
print(df.head())
```

---

## 2. Data Cleaning

### Importance
Data cleaning is crucial for correcting or removing inaccurate, corrupted, or irrelevant data from the dataset.

### Common Operations

- **`dropna()`**: Removes rows or columns with missing values.
- **`fillna()`**: Fills missing values.
- **`astype()`**: Converts column data types. 
- **`rename()`**: Renames columns or index names.
- **`drop()`**: Removes rows or columns that match given labels.

---

### An example DataFrame

```{python}
#| echo: true
import pandas as pd

data = {
    'type': ['Dog', 'Cat', 'Dog', 'Cat', 'Dog'],
    'name': ['Rex', 'Whiskers', 'Buddy', 'Mittens', 'Spot'],
    'age': [5, 5, 2, 4, 6],
    'weight': [20, None, 15, 4, 25]
}

df = pd.DataFrame(data)
```


---

### Example: Renaming a Column

#### Code:
```{python}
#| echo: true
cleaned = df.rename(columns={'weight': 'weight_kg'})
```

[üêçüß†](https://pandastutor.com/vis.html#code=import%20pandas%20as%20pd%0Afrom%20pandas%20import%20DataFrame,%20Series%0A%0Adata%20%3D%20%7B%0A%20%20%20%20'type'%3A%20%5B'Dog',%20'Cat',%20'Dog',%20'Cat',%20'Dog'%5D,%0A%20%20%20%20'name'%3A%20%5B'Rex',%20'Whiskers',%20'Buddy',%20'Mittens',%20'Spot'%5D,%0A%20%20%20%20'age'%3A%20%5B5,%205,%202,%204,%206%5D,%0A%20%20%20%20'weight'%3A%20%5B20,%20None,%2015,%204,%2025%5D%0A%7D%0A%0Adf%20%3D%20DataFrame%28data%29%0A%0Acleaned%20%3D%20df.rename%28columns%3D%7B'weight'%3A%20'weight_kg'%7D%29&d=2024-08-20&lang=py&v=v1){target="_blank"}

#### Result:
```{python}
print(cleaned)
```

___

### Example: Filling missing data

#### Code:
```{python}
#| echo: true
cleaned = cleaned.fillna({'weight_kg': 7})
```

[üêçüß†](https://pandastutor.com/vis.html#code=import%20pandas%20as%20pd%0Afrom%20pandas%20import%20DataFrame,%20Series%0A%0Adata%20%3D%20%7B%0A%20%20%20%20'type'%3A%20%5B'Dog',%20'Cat',%20'Dog',%20'Cat',%20'Dog'%5D,%0A%20%20%20%20'name'%3A%20%5B'Rex',%20'Whiskers',%20'Buddy',%20'Mittens',%20'Spot'%5D,%0A%20%20%20%20'age'%3A%20%5B5,%205,%202,%204,%206%5D,%0A%20%20%20%20'weight'%3A%20%5B20,%20None,%2015,%204,%2025%5D%0A%7D%0A%0Adf%20%3D%20DataFrame%28data%29%0A%0Acleaned%20%3D%20df.rename%28columns%3D%7B'weight'%3A%20'weight_kg'%7D%29%0Acleaned%20%3D%20cleaned.fillna%28%7B'weight_kg'%3A%207%7D%29%0A&d=2024-08-20&lang=py&v=v1){target="_blank"}

#### Result:
```{python}
print(cleaned)
```

---

## 3. Data Transformation

### Importance
Data transformation involves modifying data to prepare it for analysis, which may include _filtering_, _sorting_, or _adding_ new columns.

### Common Operations

- **`query()`**: Filter DataFrame using a query expression string.
- **`assign()`**: Add new columns or overwrite existing ones.
- **`apply()`**: Apply a function to rows or columns.
- **`sort_values()`**: Sort by the values of columns.

---


### Transformation Example: Adding a New Column for Age in Months

#### Code:
```{python}
#| echo: true
transformed = cleaned.assign(age_months=cleaned['age'] * 12)
```


[üêçüß†](https://pandastutor.com/vis.html#code=import%20pandas%20as%20pd%0Afrom%20pandas%20import%20DataFrame,%20Series%0A%0Adata%20%3D%20%7B%0A%20%20%20%20'type'%3A%20%5B'Dog',%20'Cat',%20'Dog',%20'Cat',%20'Dog'%5D,%0A%20%20%20%20'name'%3A%20%5B'Rex',%20'Whiskers',%20'Buddy',%20'Mittens',%20'Spot'%5D,%0A%20%20%20%20'age'%3A%20%5B5,%205,%202,%204,%206%5D,%0A%20%20%20%20'weight'%3A%20%5B20,%20None,%2015,%204,%2025%5D%0A%7D%0A%0Adf%20%3D%20DataFrame%28data%29%0A%0Acleaned%20%3D%20df.rename%28columns%3D%7B'weight'%3A%20'weight_kg'%7D%29%0Acleaned%20%3D%20cleaned.fillna%28%7B'weight_kg'%3A%207%7D%29%0Atransformed%20%3D%20cleaned.assign%28age_months%3Dcleaned%5B'age'%5D%20*%2012%29%0A%0A&d=2024-08-20&lang=py&v=v1){target="_blank"}

#### Result:
```{python}
print(transformed)
```

---

## 4. Combining Data

### Importance
Combining data is essential when you need to enrich or expand your dataset through additions from other data sources.

### Common Operations

- **`merge()`**: Combines DataFrames based on keys.
- **`join()`**: Joins DataFrames using index or key.
- **`concat()`**: Concatenates DataFrames along an axis.

---

### Combining Example: Merging with a Second Dataframe

#### Code:
```{python}
#| echo: true
toys = pd.DataFrame({
    'name': ['Spot', 'Mittens', 'Buddy', 'Whiskers', 'Rex'],
    'number_of_toys': [6, 3, 5, 8, 2]
})

combined = transformed.merge(toys, on='name', how='left')
```


[üêçüß†](https://pandastutor.com/vis.html#code=import%20pandas%20as%20pd%0Afrom%20pandas%20import%20DataFrame,%20Series%0A%0Adata%20%3D%20%7B%0A%20%20%20%20'type'%3A%20%5B'Dog',%20'Cat',%20'Dog',%20'Cat',%20'Dog'%5D,%0A%20%20%20%20'name'%3A%20%5B'Rex',%20'Whiskers',%20'Buddy',%20'Mittens',%20'Spot'%5D,%0A%20%20%20%20'age'%3A%20%5B5,%205,%202,%204,%206%5D,%0A%20%20%20%20'weight'%3A%20%5B20,%20None,%2015,%204,%2025%5D%0A%7D%0A%0Adf%20%3D%20DataFrame%28data%29%0A%0Acleaned%20%3D%20df.rename%28columns%3D%7B'weight'%3A%20'weight_kg'%7D%29%0Acleaned%20%3D%20cleaned.fillna%28%7B'weight_kg'%3A%207%7D%29%0Atransformed%20%3D%20cleaned.assign%28age_months%3Dcleaned%5B'age'%5D%20*%2012%29%0A%0Atoys%20%3D%20pd.DataFrame%28%7B%0A%20%20%20%20'name'%3A%20%5B'Spot',%20'Mittens',%20'Buddy',%20'Whiskers',%20'Rex'%5D,%0A%20%20%20%20'number_of_toys'%3A%20%5B6,%203,%205,%208,%202%5D%0A%7D%29%0A%0Acombined%20%3D%20transformed.merge%28toys,%20on%3D'name',%20how%3D'left'%29%0A&d=2024-08-20&lang=py&v=v1){target="_blank"}

#### Result:
```{python}
print(combined)
```

---

## 5. Grouping and Aggregation

### Importance
Grouping and aggregation are critical for summarizing data, which can help in identifying patterns or performing segment-wise analysis.

### Common Operations

- **`groupby()`**: Group data by columns for aggregation.
- **`sum()`**: Sum values across rows/columns.
- **`mean()`**: Calculate mean of values across rows/columns.
- **`aggregate()`**: Apply functions to groups, reducing dimensions.

---

### Grouping Example: Grouping by Type
#### Code:
```{python}
#| echo: true
grouped = combined.groupby('type')
```

[üêçüß†](https://pandastutor.com/vis.html#code=import%20pandas%20as%20pd%0Afrom%20pandas%20import%20DataFrame,%20Series%0A%0Adata%20%3D%20%7B%0A%20%20%20%20'type'%3A%20%5B'Dog',%20'Cat',%20'Dog',%20'Cat',%20'Dog'%5D,%0A%20%20%20%20'name'%3A%20%5B'Rex',%20'Whiskers',%20'Buddy',%20'Mittens',%20'Spot'%5D,%0A%20%20%20%20'age'%3A%20%5B5,%205,%202,%204,%206%5D,%0A%20%20%20%20'weight'%3A%20%5B20,%20None,%2015,%204,%2025%5D%0A%7D%0A%0Adf%20%3D%20DataFrame%28data%29%0A%0Acleaned%20%3D%20df.rename%28columns%3D%7B'weight'%3A%20'weight_kg'%7D%29%0Acleaned%20%3D%20cleaned.fillna%28%7B'weight_kg'%3A%207%7D%29%0Atransformed%20%3D%20cleaned.assign%28age_months%3Dcleaned%5B'age'%5D%20*%2012%29%0A%0Atoys%20%3D%20pd.DataFrame%28%7B%0A%20%20%20%20'name'%3A%20%5B'Spot',%20'Mittens',%20'Buddy',%20'Whiskers',%20'Rex'%5D,%0A%20%20%20%20'number_of_toys'%3A%20%5B6,%203,%205,%208,%202%5D%0A%7D%29%0A%0Acombined%20%3D%20transformed.merge%28toys,%20on%3D'name',%20how%3D'left'%29%0Agrouped%20%3D%20combined.groupby%28'type'%29%0A&d=2024-08-20&lang=py&v=v1){target="_blank"}

#### Result:

**Note**: `GroupBy` objects cannot be directly visualized.
```{python}
# GroupBy objects can't be directly visualized like DataFrames
# Iterate over each group
for name, group in grouped:
    print(f"Group: {name}")
    print(group)
    print("\n")  # Adding a newline for better separation between groups
```

---

### Aggregation Example: Who Has More Toys? Cats or Dogs?
```{python}
#| echo: true
aggregated = grouped.agg(average_toys=('number_of_toys', 'mean'))
```

[üêçüß†](https://pandastutor.com/vis.html#code=import%20pandas%20as%20pd%0Afrom%20pandas%20import%20DataFrame,%20Series%0A%0Adata%20%3D%20%7B%0A%20%20%20%20'type'%3A%20%5B'Dog',%20'Cat',%20'Dog',%20'Cat',%20'Dog'%5D,%0A%20%20%20%20'name'%3A%20%5B'Rex',%20'Whiskers',%20'Buddy',%20'Mittens',%20'Spot'%5D,%0A%20%20%20%20'age'%3A%20%5B5,%205,%202,%204,%206%5D,%0A%20%20%20%20'weight'%3A%20%5B20,%20None,%2015,%204,%2025%5D%0A%7D%0A%0Adf%20%3D%20DataFrame%28data%29%0A%0Acleaned%20%3D%20df.rename%28columns%3D%7B'weight'%3A%20'weight_kg'%7D%29%0Acleaned%20%3D%20cleaned.fillna%28%7B'weight_kg'%3A%207%7D%29%0Atransformed%20%3D%20cleaned.assign%28age_months%3Dcleaned%5B'age'%5D%20*%2012%29%0A%0Atoys%20%3D%20pd.DataFrame%28%7B%0A%20%20%20%20'name'%3A%20%5B'Spot',%20'Mittens',%20'Buddy',%20'Whiskers',%20'Rex'%5D,%0A%20%20%20%20'number_of_toys'%3A%20%5B6,%203,%205,%208,%202%5D%0A%7D%29%0A%0Acombined%20%3D%20transformed.merge%28toys,%20on%3D'name',%20how%3D'left'%29%0Agrouped%20%3D%20combined.groupby%28'type'%29%0Aaggregated%20%3D%20grouped.agg%28average_toys%3D%28'number_of_toys',%20'mean'%29%29%0A&d=2024-08-20&lang=py&v=v1){target="_blank"}

#### Result:
```{python}
print(aggregated)
```

---

## 6. Data Summarization

### Importance
Data summarization provides a quick look into the dataset, which is helpful for initial analyses and decision-making.

### Common Operations
- `describe()`
- `value_counts()`

---

### Example: Descriptive Statistics, `describe()`

#### Code
```{python}
#| echo: true
summary_stats = combined.describe()
```

#### Result
```{python}
print(summary_stats)
```

---

### Example: Descriptive Statistics, `value_counts()`

#### Code
```{python}
#| echo: true
counts = combined['type'].value_counts()
```

#### Result
```{python}
print(counts)
```

---


## 7. Output/Export

### Importance
The final step in any data analysis workflow is to save or export your results, making them available for sharing or further processing.

### Common Operations
- `to_csv()`
- `to_excel()`
- `to_json()`

---

### Example: Exporting to CSV
```python
combined.to_csv('processed_pets_data.csv')
```

---

## Combining the Workflow with Method Chaining

### Introduction to Method Chaining
Method chaining allows combining multiple operations into a single, coherent expression. It enhances readability and efficiency.

---

### A Complete Workflow Example Using "Method Chaining"

#### 1. Setting up our data (you should already have created these)
```{python}
#| echo: true
import pandas as pd
from pandas import DataFrame, Series

data = {
    'type': ['Dog', 'Cat', 'Dog', 'Cat', 'Dog'],
    'name': ['Rex', 'Whiskers', 'Buddy', 'Mittens', 'Spot'],
    'age': [5, 5, 2, 4, 6],
    'weight': [20, None, 15, 4, 25]
}

toys = DataFrame({
    'name': ['Spot', 'Whiskers', 'Buddy', 'Mittens', 'Rex'],
    'number_of_toys': [6, 3, 5, 8, 2]
})
```

---
### Complete Workflow Example Using Method Chaining

#### Using method chaining to combine operations

```{python}
#| echo: true
df = DataFrame(data) # read    
processed = (df        
                .rename(columns={'weight': 'weight_kg'})     # clean
                .fillna({'weight_kg': 10})                   # clean
                .assign(age_months=df['age'] * 12)           # transform
                .merge(toys, on='name', how='left')          # combine
                .groupby('type')                             # group
                .agg(average_toys=('number_of_toys','mean')) # aggregate
            )

```

[üêçüß†](https://pandastutor.com/vis.html#code=import%20pandas%20as%20pd%0Afrom%20pandas%20import%20DataFrame,%20Series%0A%0Adata%20%3D%20%7B%0A%20%20%20%20'type'%3A%20%5B'Dog',%20'Cat',%20'Dog',%20'Cat',%20'Dog'%5D,%0A%20%20%20%20'name'%3A%20%5B'Rex',%20'Whiskers',%20'Buddy',%20'Mittens',%20'Spot'%5D,%0A%20%20%20%20'age'%3A%20%5B5,%205,%202,%204,%206%5D,%0A%20%20%20%20'weight'%3A%20%5B20,%20None,%2015,%204,%2025%5D%0A%7D%0A%0Atoys%20%3D%20DataFrame%28%7B%0A%20%20%20%20'name'%3A%20%5B'Spot',%20'Whiskers',%20'Buddy',%20'Mittens',%20'Rex'%5D,%0A%20%20%20%20'number_of_toys'%3A%20%5B6,%203,%205,%208,%202%5D%0A%7D%29%0A%0Adf%20%3D%20DataFrame%28data%29%20%23%20read%20%20%20%20%0Aprocessed%20%3D%20%28df%20%20%20%20%20%20%20%20%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20.rename%28columns%3D%7B'weight'%3A%20'weight_kg'%7D%29%20%20%20%20%20%23%20clean%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20.fillna%28%7B'weight_kg'%3A%2010%7D%29%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%23%20clean%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20.assign%28age_months%3Ddf%5B'age'%5D%20*%2012%29%20%20%20%20%20%20%20%20%20%20%20%23%20transform%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20.merge%28toys,%20on%3D'name',%20how%3D'left'%29%20%20%20%20%20%20%20%20%20%20%23%20combine%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20.groupby%28'type'%29%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%23%20group%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20.agg%28average_toys%3D%28'number_of_toys','mean'%29%29%20%23%20aggregate%0A%20%20%20%20%20%20%20%20%20%20%20%20%29%0A&d=2024-08-20&lang=py&v=v1){target="_blank"}

#### Result
```{python}
print(processed)
```

