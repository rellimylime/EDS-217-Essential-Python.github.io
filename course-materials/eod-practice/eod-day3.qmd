---
title: "Day 3: Tasks & activities"
subtitle: "Control Flows and Series Analysis"
jupyter: eds217_2025
format: 
    html:
        toc: true
        toc-depth: 3
        code-fold: show
---

::: {style="width: 80%; margin: auto;"}
![](https://cdn.midjourney.com/582b868e-dd7f-45ba-974f-9761288decdb/0_1.jpeg)
:::
:::{.gray-text .center-text}
*A cartoon panda looking over a year's worth of monthly class exams. The panda is doing great; A+!* (Midjourney5)[https://www.midjourney.com/jobs/6b63c3ca-c64d-41b8-a791-7e4b2594c781?index=0]
:::

## Introduction

In this end-of-day activity, we'll practice the concepts you learned today: **control flows** and **pandas Series analysis**. We'll work with real student test score data to apply if/else statements, loops, and Series operations that you learned in today's sessions.

## Learning Objectives

By completing this exercise, you will practice:

1. **Control Flow Concepts** (from Sessions 3a & 3b):
   - Using `if`/`elif`/`else` statements for decision making
   - Using `for` loops to iterate through data
   - Combining control flows with data analysis

2. **Series Operations** (from Session 3c):
   - Creating Pandas Series with custom indices
   - Using Series statistical methods (`.mean()`, `.median()`, `.max()`, `.min()`)
   - Basic Series indexing and slicing
   - Applying NumPy statistical functions to Series

## Setup

Let's import the libraries we learned about today:

```{python}
#| echo: true

import pandas as pd
import numpy as np
```

## Part 1: Creating and Analyzing Test Scores

Let's work with a realistic dataset of monthly test scores for a student throughout the academic year.

### Task 1: Create the Test Scores Series

Create a pandas Series with the following monthly test scores:

```{python}
#| echo: true

# Monthly test scores (September through June)
scores_data = [78, 85, 92, 88, 79, 83, 91, 87, 89, 94]
months = ['Sep', 'Oct', 'Nov', 'Dec', 'Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun']

# Create the Series
scores = pd.Series(scores_data, index=months)
print("Monthly Test Scores:")
print(scores)
```

### Task 2: Basic Statistical Analysis

Using the Series methods you learned today, calculate:

```{python}
#| echo: true

# Calculate statistics using Series methods
average_score = scores.mean()
highest_score = scores.max()
lowest_score = scores.min()
median_score = scores.median()

print(f"Average score: {average_score:.2f}")
print(f"Highest score: {highest_score}")
print(f"Lowest score: {lowest_score}")
print(f"Median score: {median_score:.2f}")
```

### Task 3: Applying Control Flows

Now let's use the control flow concepts from today to analyze the scores:

#### 3a. Performance Categories

Use `if`/`elif`/`else` statements to categorize the average score:

```{python}
#| echo: true

# Categorize performance based on average score
if average_score >= 90:
    performance = "Excellent"
elif average_score >= 80:
    performance = "Good"
elif average_score >= 70:
    performance = "Satisfactory"
else:
    performance = "Needs Improvement"

print(f"Overall performance: {performance} (Average: {average_score:.2f})")
```

#### 3b. Month-by-Month Analysis

Use a `for` loop to analyze each month's performance:

```{python}
#| echo: true

print("\nMonth-by-Month Performance Analysis:")
print("=" * 40)

for month in scores.index:
    score = scores[month]
    
    # Use if/else to provide feedback for each month
    if score >= 90:
        feedback = "Outstanding!"
    elif score >= 85:
        feedback = "Great work!"
    elif score >= 80:
        feedback = "Good job!"
    elif score >= 75:
        feedback = "Solid effort!"
    else:
        feedback = "Room for improvement"
    
    print(f"{month}: {score} - {feedback}")
```

## Part 2: Series Operations and Comparisons

### Task 4: Finding Specific Months

Use basic Series indexing to explore the data:

```{python}
#| echo: true

# Find specific months using indexing (concepts from Session 3c)
print("Score in December:", scores['Dec'])
print("Score in May:", scores['May'])

# Using basic slicing (taught in Session 3c)
print("\nFirst three months:")
print(scores[:3])

print("\nLast three months:")
print(scores[-3:])
```

### Task 5: Comparing Performance Periods

Let's analyze different parts of the year using basic slicing:

```{python}
#| echo: true

# Fall semester (first 4 months)
fall_scores = scores[:4]
fall_average = fall_scores.mean()

# Spring semester (last 6 months) 
spring_scores = scores[4:]
spring_average = spring_scores.mean()

print(f"Fall semester average: {fall_average:.2f}")
print(f"Spring semester average: {spring_average:.2f}")

# Use control flow to compare performance
if spring_average > fall_average:
    improvement = spring_average - fall_average
    print(f"Improvement in spring: +{improvement:.2f} points!")
elif fall_average > spring_average:
    decline = fall_average - spring_average
    print(f"Performance declined in spring: -{decline:.2f} points")
else:
    print("Performance remained consistent between semesters")
```

## Part 3: Advanced Analysis with NumPy Functions

### Task 6: Using NumPy Statistical Functions

Apply NumPy functions to our Series (as learned in Session 3c):

```{python}
#| echo: true

# NumPy statistical functions work on Pandas Series!
np_mean = np.mean(scores)
np_std = np.std(scores)
np_sum = np.sum(scores)

print(f"Using NumPy functions:")
print(f"Mean: {np_mean:.2f}")
print(f"Standard deviation: {np_std:.2f}")
print(f"Total points: {np_sum}")

# Determine consistency using standard deviation
if np_std < 5:
    consistency = "Very consistent"
elif np_std < 8:
    consistency = "Moderately consistent"
else:
    consistency = "Inconsistent"

print(f"Performance consistency: {consistency} (std dev: {np_std:.2f})")
```

## Part 4: Challenge - Combining All Concepts

### Task 7: Comprehensive Analysis

Combine control flows, Series operations, and NumPy functions:

```{python}
#| echo: true

print("Comprehensive Performance Report")
print("=" * 35)

# Count months above/below average using a for loop and control flow
above_average_count = 0
below_average_count = 0

print(f"Overall average: {average_score:.2f}")
print("\nMonthly performance relative to average:")

for month in scores.index:
    score = scores[month]
    if score > average_score:
        status = "Above average"
        above_average_count += 1
    elif score < average_score:
        status = "Below average"
        below_average_count += 1
    else:
        status = "At average"
    
    difference = score - average_score
    print(f"{month}: {score} ({status}, {difference:+.2f})")

print(f"\nSummary:")
print(f"Months above average: {above_average_count}")
print(f"Months below average: {below_average_count}")

# Final recommendation using control flow
if above_average_count > below_average_count:
    print("Recommendation: Strong performance overall! Keep up the good work.")
elif below_average_count > above_average_count:
    print("Recommendation: Focus on consistency. Consider study habit adjustments.")
else:
    print("Recommendation: Balanced performance. Work on achieving more peak months.")
```

## Conclusion

In this activity, you practiced:

✅ **Control Flow Concepts**:
- `if`/`elif`/`else` statements for categorizing and comparing data
- `for` loops for iterating through Series data
- Combining conditions with data analysis

✅ **Pandas Series Operations**:
- Creating Series with custom indices
- Statistical methods (`.mean()`, `.max()`, `.min()`, `.median()`)
- Basic indexing (`series['key']`) and slicing (`series[:3]`)

✅ **NumPy Integration**:
- Using NumPy statistical functions on Pandas Series
- Understanding how NumPy and Pandas work together

These are the foundational skills that will support all your future data science work. Great job applying today's concepts!

## Additional Practice (Optional)

Try creating your own Series with different data (maybe daily temperatures, stock prices, or sports scores) and apply the same analysis techniques you used today.

::: {.center-text .body-text-xl .teal-text}
End Activity Session (Day 3)
:::
