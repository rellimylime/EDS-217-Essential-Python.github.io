---
title: "Day 5: Tasks & Activities"
subtitle: "Exploring the Banana Index: Environmental Impact of Food Production"
jupyter: eds217_2025
format: 
    html:
        toc: true
        toc-depth: 3
        code-fold: show
---

::: {style="width: 80%; margin: auto;"}
![](https://cdn.midjourney.com/4d6744a0-23ed-42a4-ab08-e13d12a2c7f3/0_3.jpeg)
:::
:::{.gray-text .center-text}
*A cartoon panda is eating a banana* [Midjourney5](https://www.midjourney.com/jobs/c7c7eb8a-a373-4f9b-8051-c11fee7479d4?index=0)
:::


## Introduction

In this activity, you'll explore the "[Banana Index](https://www.economist.com/graphic-detail/2023/04/11/a-different-way-to-measure-the-climate-impact-of-food)" dataset, which compares the environmental impact of various food products to that of a banana. These data were developed by the Economist magazine in 2023 and they [posted their data to github](https://github.com/TheEconomist/banana-index-data) for us to use. This exercise will help you practice working with pandas DataFrames, data manipulation, and visualization skills while learning about the environmental impacts of food production.

### Reference:
The Economist and Solstad, S., 2023. The Economist's Banana index. First published in the article "A different way to measure the climate impact of food", The Economist, April 11, 2023.

## Setup

First, let's import the necessary libraries and load the data:

```{python}
#| echo: true
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

# Load the data
url = "https://github.com/TheEconomist/banana-index-data/releases/download/1.0/bananaindex.csv"
df = pd.read_csv(url)
```

```{python}
#| echo: true
# Display the first few rows:
print(df.head())
```

```{python}
#| echo: true
# Display the dataframe info:
print(df.info())
```

## Tasks

### 1. Data Preparation

a) Set the index of the DataFrame to be the 'entity' column.
```{python}
#| echo: false
#| include: false

# The fastest way to set the index is when loading the dataframe:
df = pd.read_csv(url, index_col='entity')

# Note - We could can also use set index to accomplish the same thing after loading:
# df.set_index('entity', inplace=True)
# df = pd.read_csv(url)
```

b) Remove the 'year', 'Banana values', 'type', 'Unnamed: 16', and 'Chart?' columns.
```{python}
#| echo: false
#| include: false
df = df.drop([
    'year', 'Banana values', 
    'type', 'Chart?', 'Unnamed: 16'], axis='columns')

# Note: Another way to do this is to use the in_place option:
# df.drop(['year', 'Banana values', 'type', 'Chart?', 'Unnamed: 16'], axis='columns', inplace=True)

```

c) Display the first few rows of the modified DataFrame.
```{python}
#| echo: false
#| include: false
print(df.head())
```

### 2. Exploring Banana Scores

a) For each of the pre-computed banana score columns (kg, calories, and protein), show the 10 highest-scoring food products.
```{python}
#| echo: false
#| include: false
print("\nTop 10 for Bananas index (kg):")
print(df['Bananas index (kg)'].sort_values(ascending=False).head(10))

print("\nTop 10 for Bananas index (1000 kcal):")
print(df['Bananas index (1000 kcalories)'].sort_values(ascending=False).head(10))

print("\nTop 10 for Bananas index (100g protein):")
print(df['Bananas index (100g protein)'].sort_values( ascending=False).head(10))

# Note: We could also use the df.filter() command to select all the columns that contain 'Bana':

for each_column in df.filter(like='Bana'):
    print(f"\nTop 10 for {each_column}:")
    print(df[each_column].sort_values(ascending=False).head(10))
```

b) Edit the function below so that is returns the top 10 scores for a given column:

```{python}
def return_top_ten(df, column):
    """ Return the top 10 values of a column """
    pass
```

:::{.callout-tip title="`return` values from functions"}
The `pass` in our function is a temporary statement that allows the function to execute but not do anything. You need to remove the `pass` statement and add a `return` statement that provides the necessary functionality. For example, if the function was supposed to add 2 to every value of a column, you'd delete the `pass` statement and add `return df[column] * 2`
:::


```{python}
#| echo: false
#| include: false
def return_top_10(df, column):
    "Return the 10 larges values of a column"
    return df[column].sort_values(ascending=False).head(10)
```

c) Use your function to display the results for each of the three Banana index columns.
```{python}
#| echo: false
#| include: false
banana_columns = [
    'Bananas index (kg)', 
    'Bananas index (1000 kcalories)', 
    'Bananas index (100g protein)'
]

# Or:
# banana_columns = df.filter(like='Bana').columns.to_list()

for banana_column in banana_columns:
    top_10 = return_top_10(df, banana_column)
    print(f"\nTop 10 values for {banana_column}:")
    print(top_10)
```

### 3. Common High-Scoring Foods

Identify which foods, if any, appear in the top 10 for all three banana score lists (kg, calories, and protein).

:::{.callout-tip title="Unpacking iterables using the `*` operator"}
Python `set`s allow you to quickly determine intersections:
`in_all_three = set.intersection(seta, setb, setc)`, or you can use the `*` operator to [unpack](https://www.pythonforbeginners.com/basics/unpacking-in-python) a list of sets directly:
`in_all_three = set.intersection(*list_of_sets)`
:::

```{python}
#| echo: false
#| include: false

top_10_kg = set(return_top_10(df, 'Bananas index (kg)').index)
top_10_kcal = set(return_top_10(df, 'Bananas index (1000 kcalories)').index)
top_10_protein = set(return_top_10(df, 'Bananas index (100g protein)').index)

# Use a list comprehension and df.filter to make a list of sets:
# list_of_sets = [set(return_top_10(df, column).index) for column in df.filter(like='Bana')]
# common_foods = set.intersection(*list_of_sets)

common_foods = top_10_kg.intersection(top_10_kcal, top_10_protein)
print("\nFoods in top 10 for all three metrics:")
print(common_foods)
```

### 4. Land Use Analysis

a) Create a new column named 'Bananas index (land use 1000 kcal)', calculating that food item's use of land for every 1,000 kcal in comparison to a banana. 

:::{.callout-tip}
The data on `land_use_1000kcal` for bananas is found as the entry for this column in the `Bananas` row.
:::

```{python}
#| echo: false
#| include: false

bananas_land_use_1000kcal = df.loc['Bananas', 'land_use_1000kcal']

df['Bananas index (land use 1000 kcal)'] = df['land_use_1000kcal'] / bananas_land_use_1000kcal 
```

b) Display the 10 foods with the highest land use score.
```{python}
#| echo: false
#| include: false
print("\nTop 10 foods by land use score:")
print(return_top_10(df, 'Bananas index (land use 1000 kcal)'))
```

c) Compare this list with the previous top 10 lists. Are there any common foods?
```{python}
#| echo: false
#| include: false
# Use a list comprehension and df.filter to make a list of sets:
list_of_sets = [set(return_top_10(df, column).index) for column in df.filter(like='Bana')]
common_foods = set.intersection(*list_of_sets)
print("\nFoods in top 10 for all four metrics:")
print(common_foods)
```

### 5. Cheese Analysis

Identify the type of cheese with the highest banana score per 1,000 kcal. How does it compare to other cheeses in the dataset?

```{python}
#| echo: false
#| include: false
# 5. Cheese Analysis
cheese_df = df.filter(like='heese', axis='rows')
# cheese_df = df[df.index.str.contains('cheese', case=False)]
print("\nCheese with highest banana score per 1000 kcal:")
print(cheese_df['Bananas index (1000 kcalories)'].sort_values(ascending=False).head(1))

# We could also modify our function to take a number instead of assuming always 10:
def return_top_n(df, column, n=10):
    """ Return the N largest values of a column
    
    n = 10 is default
    
    """
    return df[column].sort_values(ascending=False).head(n)

print("\nCheese with highest banana score per 1000 kcal:")
print(return_top_n(cheese_df, 'Bananas index (1000 kcalories)', n=1))
```

## Conclusion

Summarize your findings from this analysis. What insights have you gained about the environmental impact of different foods? What aspects of Pandas do you want to practice more? 

::: {.center-text .body-text-xl .teal-text}
End Activity Session (Day 5)
:::
