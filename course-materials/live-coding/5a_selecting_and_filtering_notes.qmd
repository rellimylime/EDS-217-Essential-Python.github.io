---
title: "Live Coding Session"
subtitle: "Basic Pandas Selection and Filtering"
jupyter: eds217_2025
search: false
format: 
    html:
        toc: true
        toc-depth: 3
        code-fold: show
---

In this live coding session, we'll explore fundamental concepts of selecting and filtering data in pandas DataFrames, using examples different from our cheatsheet to broaden your understanding.

While filtering and selection are related concepts in data manipulation, they have distinct differences:

**Selection**:

1. Definition: Selection refers to choosing specific columns or rows from a DataFrame based on their labels or positions.
2. Purpose: It's used to extract a subset of data you're interested in, without necessarily applying any conditions.
3. Methods: In pandas, selection is typically done using methods like `.loc[]`, `.iloc[]`, or square brackets `df[]` for column selection.
4. Example: Selecting specific columns like `df[['name', 'age']]` or rows `df.loc[0:5]`.

**Filtering:**

1. Definition: Filtering involves choosing rows that meet specific conditions based on the values in one or more columns.
2. Purpose: It's used to extract data that satisfies certain criteria or conditions.
3. Methods: In pandas, filtering is often done using boolean indexing or the `.query()` method.
4. Example: Filtering rows where age is greater than 30: `df[df['age'] > 30]`.

**Key differences:**

1. Scope:

   - Selection typically deals with choosing columns or rows based on their labels or positions.
   - Filtering typically deals with choosing rows based on conditions applied to the data values.

2. Condition-based:

   - Selection doesn't necessarily involve conditions (though it can with `.loc`)
   - Filtering always involves a condition or criteria.

3. Output:

   - Selection can result in both a subset of columns and/or rows.
   - Filtering typically results in a subset of rows (though the number of columns can be affected if combined with selection).

4. Use cases:

   - Selection is often used when you know exactly which columns or rows you want.
   - Filtering is used when you want to find data that meets certain criteria.

It's worth noting that in practice, these operations are often combined. For example:

```python
# This combines filtering (age > 30) and selection (only 'name' and 'profession' columns)
result = df.loc[df['age'] > 30, ['name', 'profession']]
```

Understanding the distinction between filtering and selection helps in choosing the right methods for data manipulation tasks and in communicating clearly about data operations.

## 1. Setup

First, let's import pandas and load our dataset.

```{python}
#| echo: true

import pandas as pd

# Load the dataset
df = pd.read_csv('https://bit.ly/eds217-studentdata')

# Display the first few rows
print(df.head())

# Display basic information about the DataFrame
print(df.info())
```

## 2. Basic Selection

Let's start with some basic selection techniques.

```{python}
#| echo: true

# Select a single column
majors = df['major']
print("Majors:\n", majors.head())

# Select multiple columns
id_major = df[['student_id', 'major']]
print("\nStudent IDs and Majors:\n", id_major.head())

# Select rows by index
last_five = df.iloc[-5:]
print("\nLast five rows:\n", last_five)

# Select alternate rows and specific columns
alternate_rows = df.iloc[::2, [1, 3]]
print("\nAlternate rows with age and major:\n", alternate_rows.head())
```

## 3. Filtering Based on Column Values

Now, let's explore filtering techniques.

### 3a. Single Condition Filtering

```{python}
#| echo: true

# Filter students with GPA above 3.7
high_achievers = df[df['gpa'] > 3.7]
print("High achieving students:\n", high_achievers)
```

### 3b. Multiple Conditions with Logical Operators

```{python}
#| echo: true

# Filter students who are under 20 AND majoring in Mathematics
young_math = df[(df['age'] < 20) & (df['major'] == 'Mathematics')]
print("Young Math students:\n", young_math)

# Filter students who are either 22 years old OR have a GPA of exactly 3.5
specific_students = df[(df['age'] == 22) | (df['gpa'] == 3.5)]
print("Students who are 22 or have a 3.5 GPA:\n", specific_students)
```

### 3c. Using the `filter` command

The `filter` method in pandas provides a convenient way to select specific columns or rows based on their labels. It's particularly useful when you want to select columns or rows that match a certain pattern.

Let's explore some examples:

#### Filtering using `like`.

Using `like` selects columns or rows based on the occurrence of a substring anywhere within a column or row (depending on the axis argument) name.

```{python}
#| echo: true

# Filtering columns that contain 'student' in their name:
id_columns = df.filter(like='student', axis=1)
print("Columns that contain 'student':\n", id_columns.head())

# Filtering rows where the index contains '5'
rows_with_5 = df.filter(like='5', axis=0)
print("\nRows with '5' in the index:\n", rows_with_5)
```

#### Filtering with regex

[Regular Expressions](https://regexlearn.com/learn/regex101) (regex) can also be used in the filter command.

```{python}
# Filtering columns that end with 'e'
e_ending_columns = df.filter(regex='e$', axis=1)
print("\nColumns ending with 'e':\n", e_ending_columns.head())

# Using regex to filter columns that start with 'g' or 's'
gs_columns = df.filter(regex='^[gs]', axis=1)
print("\nColumns starting with 'g' or 's':\n", gs_columns.head())
```

The `filter` method is particularly useful when you're working with DataFrames that have many columns and you want to select a subset based on a pattern in their names. 

It's more flexible than manually listing out column names, especially when column names might change or when working with unfamiliar datasets.

Remember:
- `axis=1` refers to columns
- `axis=0` refers to rows (index)
- You can use simple string matching with `like`, or more complex patterns with `regex`

## 4. Combining Selection and Filtering

Let's combine selection and filtering techniques.

```{python}
#| echo: true

# Select 'student_id' and 'major' for students with age < 21
young_students = df.loc[df['age'] < 21, ['student_id', 'major']]
print("IDs and majors of students under 21:\n", young_students)
```

## 5. Using .isin() for Multiple Values

The `.isin()` method is useful when we want to filter based on multiple possible values.

```{python}
#| echo: true

# Filter students majoring in Engineering, Chemistry, or Physics
stem_majors = df[df['major'].isin(['Engineering', 'Chemistry', 'Physics'])]
print("STEM majors (excluding CS and Math):\n", stem_majors)
```

## 6. Filtering with String Methods

Pandas provides string methods that can be used for filtering text data.

```{python}
#| echo: true

# Filter majors that contain the word 'Science'
science_majors = df[df['major'].str.contains('Science')]
print("Majors containing 'Science':\n", science_majors)
```

## 7. Advanced Selection: .loc vs .iloc

The main difference between `.loc` and `.iloc` in pandas is how they select data:

- `.loc` - **Label-based indexing:**
Uses labels/index values to select data
Can use labels, boolean arrays, or slices of labels

- `.iloc` - **Integer-based indexing:**
Uses integer positions to select data
Works with integer position-based indexing only

```{python}
#| echo: true

# Using .loc with labels
label_select = df.loc[10:15, 'age':'major']
print("Label-based selection with .loc:\n", label_select)

# Using .iloc with integer positions
position_select = df.iloc[10:15, 1:4]
print("\nInteger-based selection with .iloc:\n", position_select)
```

### Key differences between `.loc` and `.iloc` and use cases:

_Indexing type_:

- `.loc`: Use when you know the label names.
- `.iloc`: Use when you know the integer positions.

_Slicing behavior_:

- `.loc`: The end of a slice is inclusive.
- `.iloc`: The end of a slice is exclusive (similar to Python's standard slicing).

_Mixed indexing_:

- `.loc`: Can mix label, boolean, and label-based slicing.
- `.iloc`: Strictly integer-based.

_Performance_:

- `.iloc` can be slightly faster, especially for large datasets, as it doesn't need to look up labels.

_Flexibility_:

- `.loc` is more flexible, allowing for more complex queries based on labels and conditions.

### Best practices for using `.loc` and `.iloc`

Use `.loc` when working with labeled data for clarity.

Use `.iloc` when you need to select data based on its position, regardless of its label.

**Avoid using plain square brackets df[] for indexing as it can be ambiguous and lead to unexpected results.** 

Only use plain square brackets for filtering. 

## Conclusion

We've covered various aspects of selection and filtering in pandas, including:
- Basic selection of columns and rows
- Single and multiple condition filtering
- Combining selection and filtering
- Using `.isin()` for multiple value matching
- String method filtering
- Advanced selection with `.loc` and `.iloc`

These techniques, different from our cheatsheet examples, provide you with a broader understanding of data manipulation in pandas.

Practice with these methods to become more proficient in handling diverse datasets.