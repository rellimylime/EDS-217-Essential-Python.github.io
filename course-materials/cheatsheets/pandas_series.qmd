---
title: EDS 217 Cheatsheet
subtitle: Pandas Series
jupyter: eds217_2025
format: 
    html:
        toc: true
        toc-depth: 3
        code-fold: show
---

## Introduction

This cheatsheet provides a quick reference for common operations on Pandas Series. It's designed for beginning data science students who are just starting to work with Pandas.

## Importing Pandas

Always start by importing pandas:

```{python}
#| echo: true

import pandas as pd
```

## Creating a Series

### From a list

```{python}
#| echo: true

data = [1, 2, 3, 4, 5]
s = pd.Series(data)
print(s)
```

### From a dictionary

```{python}
#| echo: true

data = {'a': 0., 'b': 1., 'c': 2.}
s = pd.Series(data)
print(s)
```

### With custom index

```{python}
#| echo: true

s = pd.Series([1, 2, 3, 4, 5], index=['a', 'b', 'c', 'd', 'e'])
print(s)
```

## Basic Series Information

```{python}
#| echo: true

# Display the first few elements
print(s.head())

# Get basic information about the Series
print(s.info())

# Get summary statistics
print(s.describe())

# Get index
print(s.index)

# Get values
print(s.values)
```

## Selecting Data

### By label

```{python}
#| echo: true

# Select a single element
element = s['a']

# Select multiple elements
subset = s[['a', 'c', 'e']]
```

### By position

```{python}
#| echo: true

# Select by integer index (direct selection is being deprecated)
first_element = s.iloc[0]

# Select a slice by index (still okay):
subset = s[1:4]

# Select a slice (using iloc)
subset = s.iloc[1:4]
```

### By condition

```{python}
#| echo: true

# Select elements greater than 2
greater_than_two = s[s > 2]
```

## Basic Data Manipulation

### Updating values

```{python}
#| echo: true

s['a'] = 10
```

### Removing elements

```{python}
#| echo: true

s=s.drop(labels=['a'])
```

### Adding elements to a Series

```{python}
#| echo: true

another_series = pd.Series(
    [3, 4, 5], 
    index=['f', 'g', 'h']
)
s = pd.concat([s, another_series])

```

The `pd.concat()` command (short for concatenate) is now the preferred method for extending series. 

:::{.callout-important}
The `pd.concat()` command takes a list of pd.Series objects to concatenate. This means you must create a pd.Series of new values to extend an existing pd.Series. 
:::

### Updating elements based on their value using mask

```{python}
#| echo: true
print(s)
s = s.mask(s > 2, s * 2)
print(s)
```

This line uses the greater than (`>`) logical operator within the `mask()` function to update the series. It will double the values in series where the condition `s > 5` is `True`, while leaving other values unchanged.

### Replacing elements based on their value using where

```{python}
#| echo: true
print(s)
s = s.where(s < 8, 12)
print(s)
```

This line of code will update the values in series where condition is `False` (i.e. where `s` is not less than 8), replacing them with `12`. The values where condition is True will remain unchanged.

### Applying functions

#### Applying a newly-defined function
```{python}
#| echo: true
def squared(x):
    ''' Square the value of x '''
    return x**2

# Apply a function to each element
s_squared = s.apply(squared)
```

#### Applying a lambda (temporary) function

```{python}
#| echo: true

s_squared = s.apply(lambda x: x**2)

```

[Lambda functions](https://realpython.com/python-lambda/) allow for doing transformations with temporary functions instead of having to define functions seperately. They are good for quick, 1-off transformations. 

### Handling missing values

```{python}
#| echo: true

# Drop missing values
s_cleaned = s.dropna()

# Fill missing values
s_filled = s.fillna(0)  # Fills with 0
```

## Basic Calculations

```{python}
#| echo: true

# Calculate mean
mean_value = s.mean()

# Calculate sum
sum_value = s.sum()

# Calculate maximum
max_value = s.max()
```

## Sorting

```{python}
#| echo: true
print(s)
# Sort by values
s_sorted = s.sort_values()

# Sort by index
s_sorted_by_index = s.sort_index()
```

## Reindexing

```{python}
#| echo: true
#| 
print(f"Original Series:\n{s}\n", sep='')
new_index = ['a', 'c', 'b', 'f', 'e', 'd', 'g', 'h', 'i', 'b']
s_reindexed = s.reindex(new_index)
print(f"Re-indexed series:\n{s_reindexed}")
```

:::{.callout-info}
the `reindex()` command takes an ordered list that specifies the indicies that should be used to make a new `pd.Series` object. The list of indicies supplied to `reindex()` must have some indicies in common with the existing index. Indicies that do not appear in the existing `Series` will be set to `NaN` in the new `Series`. Repetition of indicies is allowed. 
:::


 

## Combining Series

```{python}
#| echo: true

s1 = pd.Series([1, 2, 3], index=['a', 'b', 'c'])
s2 = pd.Series([4, 5, 6], index=['d', 'e', 'f'])
s_combined = pd.concat([s1, s2])
```

## Converting to Other Data Types

```{python}
#| echo: true

# To list
list_data = s.tolist()

# To dictionary
dict_data = s.to_dict()

# To DataFrame
df = s.to_frame()
```

## Further Learning

For more advanced operations and in-depth explanations, check out these resources:

1. [Pandas Official Documentation](https://pandas.pydata.org/docs/)
2. [10 Minutes to Pandas](https://pandas.pydata.org/docs/user_guide/10min.html)
3. [Python for Data Analysis](https://wesmckinney.com/book/) by Wes McKinney

Remember, practice is key! Try these operations with different datasets to become more comfortable with Pandas Series.