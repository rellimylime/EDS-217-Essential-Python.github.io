---
title: "EDS 217 Cheatsheet"
subtitle: "Seaborn Plotting Library"
jupyter: eds217_2025
format: 
    html:
        toc: true
        toc-depth: 3
        code-fold: show
---

## Introduction to Seaborn

Seaborn is a powerful Python data visualization library built on top of Matplotlib. It provides a high-level interface for drawing attractive statistical graphics. Seaborn is particularly useful for creating complex visualizations with just a few lines of code.

Key features:
- Built-in themes for attractive plots
- Statistical plot types
- Integration with Pandas DataFrames
- Automatic estimation and plotting of statistical models

## Setting up Seaborn

To use Seaborn, you need to import it along with other necessary libraries:

```{python}
#| echo: true
import seaborn as sns
import matplotlib.pyplot as plt
import pandas as pd
import numpy as np

# Set the style for all plots
sns.set_style("whitegrid")
```

## Common Plot Types in Environmental Data Science

For these examples, we'll use various built-in datasets provided by Seaborn. These datasets are included with the library and are commonly used for demonstration purposes.

### 1. Scatter Plots

Useful for showing relationships between two continuous variables.

```{python}
#| echo: true
# Load the tips dataset
tips = sns.load_dataset("tips")
print(tips.head())
```
```{python}
#| echo: true

# Basic scatter plot
plt.figure(figsize=(10, 6))
sns.scatterplot(x='total_bill', y='tip', data=tips)
plt.title('Relationship between Total Bill and Tip')
plt.show()
```
```{python}
#| echo: true

# Add hue for a third variable
plt.figure(figsize=(10, 6))
sns.scatterplot(x='total_bill', y='tip', hue='time', data=tips)
plt.title('Relationship between Total Bill and Tip, colored by Time of Day')
plt.show()
```

The 'tips' dataset contains information about restaurant bills and tips. It's a classic dataset used for demonstrating various plotting techniques.

### 2. Line Plots

Ideal for time series data or showing trends.

```{python}
#| echo: true
# Load the flights dataset
flights = sns.load_dataset("flights")
print(flights.head())
```
```{python}
#| echo: true

# Basic line plot (uncertainty bounds calculated auto-magically by grouping rows containing the same year!)
plt.figure(figsize=(12, 6))
sns.lineplot(x='year', y='passengers', data=flights)
plt.title('Number of Passengers over Time')
plt.show()
```
```{python}
#| echo: true

# Multiple lines with confidence intervals
plt.figure(figsize=(12, 6))
sns.lineplot(x='year', y='passengers', hue='month', data=flights)
plt.title('Number of Passengers over Time, by Month')
plt.show()
```

The 'flights' dataset contains information about passenger numbers for flights over time. It's useful for demonstrating time series visualizations.

### 3. Bar Plots

Great for comparing quantities across different categories.

```{python}
#| echo: true
# Load the titanic dataset
titanic = sns.load_dataset("titanic")
print(titanic.head())
```
```{python}
#| echo: true

# Basic bar plot
plt.figure(figsize=(10, 6))
sns.barplot(x='class', y='fare', data=titanic)
plt.title('Average Fare by Passenger Class')
plt.show()
```

```{python}
#| echo: true

# Grouped bar plot
plt.figure(figsize=(10, 6))
sns.barplot(x='class', y='fare', hue='sex', data=titanic)
plt.title('Average Fare by Passenger Class and Sex')
plt.show()
```

The 'titanic' dataset contains information about passengers on the Titanic, including their class, sex, age, and survival status.

### 4. Box Plots

Useful for showing distribution of data across categories.

```{python}
#| echo: true
# Basic box plot
plt.figure(figsize=(10, 6))
sns.boxplot(x='class', y='age', data=titanic)
plt.title('Distribution of Age by Passenger Class')
plt.show()
```

```{python}
#| echo: true

# Add individual data points
plt.figure(figsize=(10, 6))
sns.boxplot(x='class', y='age', data=titanic)
sns.swarmplot(x='class', y='age', data=titanic, color=".25", size=3)
plt.title('Distribution of Age by Passenger Class with Individual Points')
plt.show()
```

### 5. Violin Plots

Similar to box plots but show the full distribution of data.

```{python}
#| echo: true
plt.figure(figsize=(10, 6))
sns.violinplot(x='class', y='age', data=titanic)
plt.title('Distribution of Age by Passenger Class (Violin Plot)')
plt.show()
```

### 6. Heatmaps

Excellent for visualizing correlation matrices or gridded data.

```{python}
#| echo: true
# Load the penguins dataset
penguins = sns.load_dataset("penguins")
print(penguins.head(5))
```
```{python}
#| echo: true

# Correlation heatmap
plt.figure(figsize=(10, 8))
correlation = penguins.select_dtypes(include=[np.number]).corr()
sns.heatmap(correlation, annot=True, cmap='coolwarm')
plt.title('Correlation Heatmap of Penguin Measurements')
plt.show()
```

The 'penguins' dataset contains size measurements for three penguin species observed on three islands in the Palmer Archipelago, Antarctica.

## Using Seaborn for Data Exploration with DataFrames

Seaborn is particularly powerful when working with Pandas DataFrames, as it can automatically infer variable types and choose appropriate plot types.

### Quick Data Overview

Recall the structure of the penguins dataframe, which has a combination of measured and categorical values:
```{python}
print(penguins.head())
```

We can explore the distribution of every _numerical_ variable as well as the pair-wise relationship between all the variables in a dataframe using `pairplot` and  can use a categorical variable to further organize the data within each plot using the `hue` argument.

```{python}
#| echo: true
# Get a quick overview of numerical variables
sns.pairplot(penguins, hue='species')
plt.suptitle('Overview of Penguin Measurements by Species', y=1.02)
plt.show()
```
```{python}
#| echo: true

# Visualize distributions of all numerical variables
sns.displot(penguins['bill_length_mm'], kind='kde')
plt.suptitle('Distribution of Penguin Bill Lengths',y=1.02)
plt.show()
```

### Exploring Relationships

```{python}
#| echo: true
# Explore relationship between variables
sns.relplot(data=penguins, x='bill_length_mm', y='bill_depth_mm', hue='species', style='sex')
plt.title('Relationship between Bill Length and Depth')
plt.show()
```
```{python}
#| echo: true

# Facet plots for multi-dimensional exploration
g = sns.FacetGrid(penguins, col='species', row='sex')
g.map(sns.scatterplot, 'bill_length_mm', 'bill_depth_mm')
g.add_legend()
plt.suptitle('Bill Measurements by Species and Sex', y=1.02)
plt.show()
```

### Categorical Data Exploration

```{python}
#| echo: true
# Compare distributions across categories
sns.catplot(data=penguins, kind='box', x='species', y='body_mass_g', hue='sex')
plt.title('Body Mass Distribution by Species and Sex')
plt.show()
```
```{python}
#| echo: true

# Count plots for categorical variables
sns.countplot(data=penguins, x='island', hue='species')
plt.title('Penguin Species Count by Island')
plt.show()
```

### Time Series Exploration

```{python}
#| echo: true
# Visualize trends over time
sns.lineplot(data=flights, x='year', y='passengers', hue='month')
plt.title('Passenger Numbers by Year and Month')
plt.show()
```

## Key Points

- Seaborn works seamlessly with Pandas DataFrames, making it easy to create plots directly from your data.
- The library offers a wide range of plot types suitable for various environmental data science tasks.
- Seaborn's statistical plotting functions (like `regplot` and `lmplot`) can automatically fit and visualize linear regressions.
- The `pairplot` function and `FacetGrid` class are powerful for creating multi-panel plots to explore complex datasets.
- Seaborn's themes and color palettes help create publication-quality figures with minimal customization.

## Resources

- [Seaborn Official Documentation](https://seaborn.pydata.org/)
- [Seaborn Tutorial](https://seaborn.pydata.org/tutorial.html)
- [Seaborn Example Gallery](https://seaborn.pydata.org/examples/index.html)
- [Seaborn Examples at the Python Graph Gallery](https://python-graph-gallery.com/seaborn/)
- [Visualization in Seaborn (Jake VanderPlas)](https://jakevdp.github.io/PythonDataScienceHandbook/04.14-visualization-with-seaborn.html)

Remember, while Seaborn is powerful, it's built on matplotlib. For more customization options, you might need to use [matplotlib](../cheatsheets/matplotlib.qmd) functions directly.

