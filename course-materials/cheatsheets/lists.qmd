---
title: EDS 217 Cheatsheet
subtitle: Lists <code>list</code>
jupyter: eds217_2025
format: 
    html:
        toc: true
        toc-depth: 3
        code-fold: show
---


# Python Lists Cheat Sheet

## 1. Creating Lists

### 1.1 Empty List
```python
my_list = []
```

### 1.2 List with Elements
```python
my_list = [1, 2, 3, 4, 5]
```

### 1.3 List with Mixed Data Types
```python
mixed_list = [1, "hello", 3.14, True]
```

### 1.4 List of Lists (Nested Lists)
```python
nested_list = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]
```

## 2. Accessing Elements

### 2.1 Access by Index (0-based)
```python
my_list = [10, 20, 30, 40]
print(my_list[0])  # Output: 10
print(my_list[2])  # Output: 30
```

### 2.2 Access Last Element
```python
print(my_list[-1])  # Output: 40
```

### 2.3 Slicing a List
```python
sublist = my_list[1:3]  # Output: [20, 30]
```

## 3. Modifying Lists

### 3.1 Change Element by Index
```python
my_list[1] = 25  # my_list becomes [10, 25, 30, 40]
```

### 3.2 Append an Element
```python
my_list.append(50)  # my_list becomes [10, 25, 30, 40, 50]
```

### 3.3 Insert an Element at a Specific Position
```python
my_list.insert(1, 15)  # my_list becomes [10, 15, 25, 30, 40, 50]
```

### 3.4 Extend List with Another List
```python
my_list.extend([60, 70])  # my_list becomes [10, 15, 25, 30, 40, 50, 60, 70]
```

## 4. Removing Elements

### 4.1 Remove by Value
```python
my_list.remove(25)  # my_list becomes [10, 15, 30, 40, 50, 60, 70]
```

### 4.2 Remove by Index
```python
del my_list[0]  # my_list becomes [15, 30, 40, 50, 60, 70]
```

### 4.3 Pop Last Element
```python
last_element = my_list.pop()  # my_list becomes [15, 30, 40, 50, 60]
```

### 4.4 Pop by Index
```python
element = my_list.pop(2)  # my_list becomes [15, 30, 50, 60]
```

## 5. List Operations

### 5.1 Length of List
```python
length = len(my_list)  # Output: 4
```

### 5.2 Check if Element Exists
```python
is_in_list = 30 in my_list  # Output: True
```

### 5.3 Concatenate Two Lists
```python
combined_list = my_list + [80, 90]  # Output: [15, 30, 50, 60, 80, 90]
```

### 5.4 Repeat a List
```python
repeated_list = [1, 2, 3] * 3  # Output: [1, 2, 3, 1, 2, 3, 1, 2, 3]
```

## 6. Looping Through Lists

### 6.1 Using a `for` Loop
```python
for item in my_list:
    print(item)
```

### 6.2 Using `enumerate` for Index and Value
```python
for index, value in enumerate(my_list):
    print(f"Index {index} has value {value}")
```

## 7. List Comprehensions

### 7.1 Basic List Comprehension
```python
squares = [x**2 for x in range(5)]  # Output: [0, 1, 4, 9, 16]
```

### 7.2 List Comprehension with Condition
```python
evens = [x for x in range(10) if x % 2 == 0]  # Output: [0, 2, 4, 6, 8]
```

## 8. List Methods

### 8.1 Sort a List
```python
my_list.sort()  # Sorts in place
```

### 8.2 Sorted Copy of List
```python
sorted_list = sorted(my_list)  # Returns a sorted copy
```

### 8.3 Reverse a List
```python
my_list.reverse()  # Reverses in place
```

### 8.4 Count Occurrences of an Element
```python
count = my_list.count(30)  # Output: 1
```

### 8.5 Find Index of an Element
```python
index = my_list.index(50)  # Output: 2
```

## 9. Common List Pitfalls

### 9.1 Avoid Modifying a List While Iterating
```python
# Incorrect
for item in my_list:
    if item < 20:
        my_list.remove(item)

# Correct (Using a copy)
for item in my_list[:]:
    if item < 20:
        my_list.remove(item)
```
