---
title: "EDS 217 Cheatsheet"
subtitle: "NumPy Generator-based Random Number Generation"
jupyter: eds217_2025
format: 
    html:
        toc: true
        toc-depth: 3
        code-fold: show
---

## NumPy Generator-based Random Number Generation Cheatsheet

For information on the previous `np.random` API and its use cases, please refer to the NumPy documentation on legacy random generation: [NumPy Legacy Random Generation](https://numpy.org/doc/stable/reference/random/legacy.html)

This cheatsheet focuses on the modern Generator-based approach to random number generation in NumPy.

### Importing NumPy

```{python}
#| echo: true

import numpy as np
```

### Creating a Generator

```{python}
#| echo: true

# Create a Generator with the default BitGenerator
rng = np.random.default_rng()

# Create a Generator with a specific seed
rng_seeded = np.random.default_rng(seed=42)
```

### Basic Random Number Generation

#### Uniform Distribution (0 to 1)

```{python}
#| echo: true

# Single random float
print(rng.random())

# Array of random floats
print(rng.random(5))
```

#### Integers

```{python}
#| echo: true

# Single random integer from 0 to 10 (inclusive)
print(rng.integers(11))

# Array of random integers from 1 to 100 (inclusive)
print(rng.integers(1, 101, size=5))
```

#### Normal (Gaussian) Distribution

```{python}
#| echo: true

# Single value from standard normal distribution
print(rng.standard_normal())

# Array from normal distribution with mean=0, std=1
print(rng.normal(loc=0, scale=1, size=5))
```

### Sampling

```{python}
#| echo: true

# Random choice from an array
arr = np.array([1, 2, 3, 4, 5])
print(rng.choice(arr))

# Random sample without replacement
print(rng.choice(arr, size=3, replace=False))
```

### Shuffling

```{python}
#| echo: true

arr = np.arange(10)
rng.shuffle(arr)
print(arr)
```

### Other Distributions

Generators provide methods for many other distributions:

```{python}
#| echo: true

# Poisson distribution
print(rng.poisson(lam=5, size=3))

# Exponential distribution
print(rng.exponential(scale=1.0, size=3))

# Binomial distribution
print(rng.binomial(n=10, p=0.5, size=3))
```

### Generating on Existing Arrays

Generators can fill existing arrays, which can be more efficient:

```{python}
#| echo: true

arr = np.empty(5)
rng.random(out=arr)
print(arr)
```

### Bit Generators

You can use different Bit Generators with varying statistical qualities:

```{python}
#| echo: true

from numpy.random import PCG64, MT19937

rng_pcg = np.random.Generator(PCG64())
rng_mt = np.random.Generator(MT19937())

print("PCG64:", rng_pcg.random())
print("MT19937:", rng_mt.random())
```

### Saving and Restoring State

```{python}
#| echo: true

# Save state
state = rng.bit_generator.state

# Generate some numbers
print("Original:", rng.random(3))

# Restore state and regenerate
rng.bit_generator.state = state
print("Restored:", rng.random(3))
```

### Spawning New Generators

You can create independent generators from an existing one:

```{python}
#| echo: true

child1, child2 = rng.spawn(2)
print("Child 1:", child1.random())
print("Child 2:", child2.random())
```

### Thread Safety and Jumping

Generators are designed to be thread-safe and support "jumping" ahead in the sequence:

```{python}
#| echo: true

rng = np.random.Generator(PCG64())
rng.bit_generator.advance(1000)  # Jump ahead 1000 steps
```

### Best Practices

1. Use `default_rng()` to create a Generator unless you have specific requirements for a different Bit Generator.
2. Set a seed for reproducibility in scientific computations and testing.
3. Use the `spawn()` method to create independent generators for parallel processing.
4. When performance is critical, consider using the `out` parameter to fill existing arrays.
5. For very long periods or when security is important, consider using the `PCG64DXSM` Bit Generator.

Remember, Generators provide a more robust, flexible, and future-proof approach to random number generation in NumPy. They offer better statistical properties and are designed to work well in both single-threaded and multi-threaded environments.