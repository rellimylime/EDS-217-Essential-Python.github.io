---
title: "EDS 217 Cheatsheet"
subtitle: "Grouping, Aggregating, and Pivot Tables in Pandas"
jupyter: eds217_2025
format: 
    html:
        toc: true
        toc-depth: 3
        code-fold: show
---

## Grouping Data

Grouping data allows you to split your DataFrame into groups based on one or more columns.

```{python}
#| echo: true

import pandas as pd
import numpy as np

# Sample DataFrame
df = pd.DataFrame({
    'category': ['A', 'B', 'A', 'B', 'A'],
    'value': [1, 2, 3, 4, 5]
})
print(df)
```

### Creating a groupby object:
```{python}
# Group by 'category'
grouped = df.groupby('category')
```

## Aggregating Data

After grouping, you can apply various aggregation functions to summarize the data within each group.

#### Basic aggregation
```{python}
#| echo: true

# Basic aggregations
print(grouped['value'].mean())
print(grouped['value'].sum())
```

#### Doing multiple aggregations at the same time using `agg()`
```{python}
#| echo: true
# Multiple aggregations
print(grouped['value'].agg(['mean', 'sum', 'count']))
```

#### Aggregation using a custom function 
```{python}
#| echo: true
# Custom aggregation function
def range_func(x):
    return x.max() - x.min()

print(grouped['value'].agg(range_func))
```

## Common Aggregation Functions

- `mean()`: Average
- `sum()`: Sum of values
- `count()`: Count of non-null values
- `min()`, `max()`: Minimum and maximum values
- `median()`: Median value
- `std()`, `var()`: Standard deviation and variance
- `first()`, `last()`: First and last values in the group

## Grouped Operations

You can apply operations to each group separately using `transform()` or `apply()`.

#### Using `transform()` to alter each group in a group by object
```{python}
#| echo: true

# Transform: apply function to each group, return same-sized DataFrame
def normalize(x):
    return (x - x.mean()) / x.std()

df['value_normalized'] = grouped['value'].transform(normalize)
```

#### Using `apply()` to alter each group in a group by object
```{python}
#| echo: true

# Apply: apply function to each group, return a DataFrame or Series
def group_range(x):
    return x['value'].max() - x['value'].min()

result = grouped.apply(group_range)
```


## Pivot Tables

Pivot tables are a powerful tool for reorganizing and summarizing data. They allow you to transform your data from a [long format to a wide](https://pandas.pydata.org/pandas-docs/stable/user_guide/reshaping.html) format, making it easier to analyze and visualize patterns.

### Working with Pivot Tables

```{python}
#| echo: true

# Sample DataFrame
df = pd.DataFrame({
    'date': ['2023-01-01', '2023-01-01', '2023-01-02', '2023-01-02'],
    'product': ['A', 'B', 'A', 'B'],
    'sales': [100, 150, 120, 180]
})
print(df)
```

#### Pivot tables with a single aggregation function

```{python}
#| echo: true

# Create a pivot table
pivot_table = pd.pivot_table(df, values='sales', index='date', columns='product', aggfunc='sum')
print(pivot_table)
```

#### Pivot tables with multiple aggregation
```{python}
#| echo: true

# Pivot table with multiple aggregation functions
pivot_multi = pd.pivot_table(df, values='sales', index='date', columns='product', 
                             aggfunc=[np.sum, np.mean])
print(pivot_multi)
```

## Key Pivot Table Parameters

- `values`: Column(s) to aggregate
- `index`: Column(s) to use as row labels
- `columns`: Column(s) to use as column labels
- `aggfunc`: Function(s) to use for aggregation (default is mean)
- `fill_value`: Value to use for missing data
- `margins`: Add row/column with subtotals (default is False)

For more detailed information on grouping, aggregating, and pivot tables in Pandas, refer to the [official Pandas documentation](https://pandas.pydata.org/docs/user_guide/groupby.html).
