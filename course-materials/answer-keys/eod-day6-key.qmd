---
title: "Day 6: Tasks & Activities"
subtitle: "Eurovision Data Analysis Exercise"
search: false
format: 
    html:
        toc: true
        toc-depth: 3
        code-fold: show
jupyter: eds217_2025
---

![](images/eurovision_panda.jpeg)

In this exercise, you'll analyze Eurovision Song Contest data using pandas. You'll practice grouping, joining, and date manipulation techniques to explore trends in the contest's history while building your data analysis skills.

## Setup

First, import the necessary libraries and load the dataset:

```{python}
#| echo: true
#| include: true
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt

# Load the dataset
url = "https://github.com/Spijkervet/eurovision-dataset/releases/download/2020.0/contestants.csv"
eurovision_df = pd.read_csv(url)
```

## Task 1: Data Exploration and Cleaning

1. Display the first few rows of the dataset.

```{python}
#| echo: true
#| include: true

print(eurovision_df.head())
```

2. Check the data types of each column.

```{python}
#| echo: true
#| include: true


print(eurovision_df.dtypes)
```

3. Identify and handle any missing values.

```{python}
#| echo: true
#| include: true


print(eurovision_df.isnull().sum())
eurovision_df = eurovision_df.fillna(0)  # Fill numeric columns with 0
```

4. Convert the 'year' column to datetime type.

```{python}
#| echo: true
#| include: true

eurovision_df['year'] = pd.to_datetime(eurovision_df['year'], format='%Y')
```


## Task 2: Filtering and Transformation

1. Create a new dataframe containing only data from 1990 onwards 

:::{.callout-important}
Use `.copy()` to make sure you create a new dataframe and not just a view.
:::

```{python}
#| echo: true
#| include: true


eurovision_1990 = eurovision_df[eurovision_df['year'].dt.year >= 1990].copy()
```

2. Calculate the difference between final points and semi-final points for each entry and make a histogram of these values using the builtin dataframe `.hist()` command. 

```{python}
#| echo: true
#| include: true

eurovision_1990['points_difference'] = eurovision_1990['points_final'] - eurovision_1990['points_sf']
eurovision_1990['points_difference'].hist()

```

## Task 3: Sorting and Aggregation

1. Find the top 10 countries with the most Eurovision appearances (use the entire dataset for this calculation)

```{python}
#| echo: true
#| include: true

top_10_countries = eurovision_df['to_country'].value_counts().head(10)
print(top_10_countries)
```

2. Calculate the average final points for each country across all years. Make a simple bar plot of these data.

```{python}
#| echo: true
#| include: true

# Step 1: Calculate average points by country
avg_points_by_country = eurovision_df.groupby('to_country')['points_final'].mean()

# Step 2: Sort by average points (highest first)
avg_points_sorted = avg_points_by_country.sort_values(ascending=False)
print("Average final points by country:")
print(avg_points_sorted.head(10))

```

::: {.callout-note}
Use `value_counts()` for counting appearances and `groupby()` for calculating averages.
:::

## Task 4: Grouping and Analysis

1. Determine the country with the highest average final points for each decade. 

::: {.callout-tip}
## Hint: Grouping Years in Pandas

When working with time series data, it's often useful to group years into larger intervals like decades, 5-year periods, etc. Here's a general approach using pandas:

1. For decades (10-year intervals):
   ```python
   df['decade'] = df['year'].dt.year // 10 * 10
   ```

2. For any N-year interval:
   ```python
   N = 5  # Change this to your desired interval (e.g., 2, 5, 10, 20)
   df['year_group'] = df['year'].dt.year // N * N
   ```

3. For more specific date ranges:
   ```python
   df['custom_group'] = pd.cut(df['year'], 
                               bins=[1990, 1995, 2000, 2005, 2010], 
                               labels=['1990-1994', '1995-1999', '2000-2004', '2005-2009'])
   ```

Remember:
- `//` is integer division (rounds down)
- Multiplying by the interval after division ensures the start year of each group

These methods create a new column that you can use with `groupby()` for aggregations across your chosen time intervals.
:::


```{python}
#| echo: true
#| include: true

# Step 1: Create decade grouping
eurovision_df['decade'] = (eurovision_df['year'].dt.year // 10) * 10

# Step 2: Calculate average points by decade and country
decade_country_avg = eurovision_df.groupby(['decade', 'to_country'])['points_final'].mean()
print("Average points by decade and country:")
print(decade_country_avg.head(10))

# Step 3: For each decade, find the country with highest average points
decade_winners = decade_country_avg.groupby('decade').idxmax()
print("\nCountry with highest average points per decade:")
print(decade_winners)
```


## Task 5: Joining Data

1. Read in a new dataframe that contains population data stored at this url:

```{python}
#| echo: true
#| include: true

population_url = 'https://bit.ly/euro_pop'

```


```{python}
#| echo: true
#| include: true

population_df = pd.read_csv(population_url)


```

2. Join this data with the Eurovision dataframe.

```{python}
#| echo: true
#| include: true

# Join Eurovision data with population data
merged_df = pd.merge(eurovision_df, population_df, left_on='to_country', right_on='country_name')
print("Merged dataset shape:", merged_df.shape)
print("Sample of merged data:")
print(merged_df[['to_country', 'points_final', 'population']].head())

```

::: {.callout-warning}
Ensure that country names match exactly between the two dataframes before joining.
:::

3. Calculate total entries per capita by country.

    **Substeps**:

    3a. Create a new dataframe containing the counts of entries for each county (use `value_counts`)

    3b. Merge the dataframe of counts of entries for each country with the population dataframe.

    3c. Calculate entries per million population (using entries per million to make the numbers easier to work with)

    3d. Sort the results by entries per capita 

    3e. Print the top 10 values

```{python}
#| echo: true
#| include: true

# Step 1: Count the number of entries for each country
country_counts = merged_df['to_country'].value_counts()
print("Entry counts by country:")
print(country_counts.head())

# Step 2: Convert to DataFrame for easier merging
country_counts_df = country_counts.reset_index()
country_counts_df.columns = ['country', 'entry_count']

# Step 3: Merge the count data with the population data
country_data = country_counts_df.merge(population_df, left_on='country', right_on='country_name', how='left')
print("\nMerged country data:")
print(country_data.head())

# Step 4: Calculate entries per capita (per million people)
country_data['entries_per_million'] = country_data['entry_count'] / (country_data['population'] / 1_000_000)

# Step 5: Sort the results
result = country_data.sort_values('entries_per_million', ascending=False)

# Display the top 10 countries by records per capita
print(result[['country', 'entry_count', 'population', 'entries_per_million']].head(10))

# Optional: Visualize the results
import matplotlib.pyplot as plt

# Step 6: Create a bar chart of top 10 countries
top_10_countries = result.head(10)
plt.figure(figsize=(12, 6))
plt.bar(top_10_countries['country'], top_10_countries['entries_per_million'])
plt.title('Top 10 Countries by Eurovision Entries per Million Population')
plt.xlabel('Country')
plt.ylabel('Entries per Million Population')
plt.xticks(rotation=45, ha='right')
plt.grid(axis='y', alpha=0.3)
plt.tight_layout()
plt.show()

```


## Task 6: Time Series Analysis

1. Plot the trend of maximum final points awarded over the years.

```{python}
#| echo: true
#| include: true

# Step 1: Calculate maximum points awarded each year
yearly_max_points = eurovision_df.groupby('year')['points_final'].max()
print("Maximum points by year (sample):")
print(yearly_max_points.head())

# Step 2: Create a simple time series plot
plt.figure(figsize=(12, 6))
yearly_max_points.plot(kind='line')
plt.title('Maximum Final Points Awarded by Year')
plt.xlabel('Year')
plt.ylabel('Maximum Points')
plt.grid(True, alpha=0.3)
plt.tight_layout()
plt.show()
```

2. Identify any significant changes in the scoring system based on this trend.

(This step simply requires visual interpretation of the plot, but perhaps you could explore if there are actual rules changes underlying observed patterns using google)

## Task 7: Choose your own analysis!

Come up with your own analysis of the Eurovision data that reveals some pattern across the data or through time. Feel free to discuss your ideas with others; often this leads to new ideas or refinement of ones you are already working on. 

## Reflection

Now that you've completed the Eurovision data analysis exercise, it's time to reflect on your experience. Add a new markdown cell to your notebook and answer the following questions:

1. **Grouping Operations**: Which grouping tasks felt most natural to you? How did breaking complex operations into individual steps help your understanding?

2. **Data Joining**: What challenges did you encounter when merging the Eurovision and population datasets? How did the step-by-step approach help?

3. **Date Manipulation**: How comfortable did you feel working with the datetime operations (like creating decades)? 

4. **Visualization with matplotlib**: How did creating plots help you understand the patterns in the data?

5. **Real-world Applications**: How could you apply these grouping, joining, and date manipulation skills to environmental data science problems?

6. **Most Interesting Discovery**: What was the most surprising pattern you found in the Eurovision data?

::: {.callout-tip}
## Looking Ahead to Day 7
Tomorrow we'll learn about advanced visualization with seaborn, which will allow you to create even more sophisticated plots to explore patterns in your data!
:::

::: {.callout-note}
Remember, breaking complex operations into clear steps makes your code more readable and helps you debug problems more easily - both crucial skills for data scientists!
:::

Remember to document your code, explain your reasoning, and interpret the results of your analysis throughout the exercise.