---
title: "Day 2: Answer Key"
subtitle: "Python Data Structures Practice"
search: false
jupyter: eds217_2025
format: 
    html:
        toc: true
        toc-depth: 3
        code-fold: true
---


::: {style="width: 80%; margin: auto;"}
![](https://cdn.midjourney.com/77f8fade-1e3b-4502-a4a6-ebc214784f8d/0_0.jpeg)
:::
:::{.gray-text .center-text}
*A cartoon panda is buried under a pile of dictionaries* (Midjourney5)[https://www.midjourney.com/jobs/ea8d00de-44ce-446b-b74b-1b2dda56b0f3?index=0]
:::

## Introduction

Welcome to the end-of-day exercise for Day 2! Today, we'll be putting into practice what you've learned about Python data structures, particularly lists and dictionaries. This exercise allows you to work with real data from your classmates while reinforcing key concepts.

## Learning Objectives

By the end of this exercise, you should be able to:

1. Create and manipulate lists and dictionaries in Python
2. Use list and dictionary methods effectively
3. Iterate through data structures using loops
4. Apply basic data analysis techniques using Python data structures

## Setup

First, let's import the necessary libraries:

```{python}
#| echo: true
# We won't use the random library until the end of this exercise, 
# but it's always good to put imported libraries at the top of your notebook.
import random 
from pprint import pprint # Using this to make our page look nicer.
```

## Part 1: Data Collection

In this first part, we'll create data structures based on information from your classmates.

### Task 1: Create a List of Classmates

Create a list containing the names of at least 4 of your classmates in this course.

```{python}
#| echo: true
#| include: true
classmates = ["Alice", "Bob", "Charlie", "David", "Eve"]
print(classmates)
```

### Task 2: Create a Dictionary of Classmate Information

Now, let's create a dictionary where the keys are your classmates' names, and the values are another dictionary containing information about them. For each , include the following information:

- Favorite color (`favorite_color`)
- Number of pets (`number_of_pets`)
- Preferred study snack (`preferred_study_snack`)
- Hours of sleep last night (`hours_of_sleep`)

```{python}
#| echo: true
#| include: true
classmate_info = {
    "Alice": {"favorite_color": "blue", "number_of_pets": 2, "preferred_study_snack": "almonds", "hours_of_sleep": 7},
    "Bob": {"favorite_color": "green", "number_of_pets": 0, "preferred_study_snack": "chips", "hours_of_sleep": 6},
    "Charlie": {"favorite_color": "red", "number_of_pets": 1, "preferred_study_snack": "carrots", "hours_of_sleep": 8},
    "David": {"favorite_color": "yellow", "number_of_pets": 3, "preferred_study_snack": "chocolate", "hours_of_sleep": 5},
    "Eve": {"favorite_color": "purple", "number_of_pets": 1, "preferred_study_snack": "popcorn", "hours_of_sleep": 7}
}
pprint(classmate_info)
```

## Part 2: Data Structure Manipulation

Now that we have our data structures, let's practice manipulating them.

### Task 3: List Operations

Using the list of classmate names you created in Task 1, perform the following operations:

a) Add a new classmate to the end of the list
b) Remove the second classmate from the list
c) Sort the list alphabetically
d) Find and print the index of a specific classmate


```{python}
#| echo: true
#| include: true
# a) Add a new classmate
classmates.append("Frank")
print("After adding Frank:", classmates)

# b) Remove the second person
removed_classmate = classmates.pop(1)
print(f"Removed {removed_classmate}. Updated list:", classmates)

# c) Sort alphabetically
classmates.sort()
print("Sorted list:", classmates)

# d) Find index of a specific classmate
charlie_index = classmates.index("Charlie")
print(f"Index of Charlie: {charlie_index}")
```

### Task 4: Dictionary Operations

Using the dictionary of classmate information from Task 2, perform the following operations:

a) Add a new key-value pair for each classmate: "favorite_study_spot"
b) Update the "number of pets" for one classmate
c) Create a list of all the favorite colors your classmates mentioned


```{python}
#| echo: true
#| include: true
# a) Add favorite_study_spot
for classmate in classmate_info:
    classmate_info[classmate]["favorite_study_spot"] = "library"  # Default value

# b) Update number of pets for one classmate
classmate_info["Alice"]["number_of_pets"] = 3

# c) List of favorite colors
favorite_colors = [info["favorite_color"] for info in classmate_info.values()]

print("Updated dictionary:")
pprint(classmate_info)
print("Favorite colors:", favorite_colors)
```

## Part 3: Data Analysis

Let's use our data structures to perform some simple analysis.

### Task 5: Basic Statistics

Calculate and print the following:

a) The average number of pets among your classmates
b) The name of the classmate who got the most sleep last night


```{python}
#| echo: true
#| include: true
# a) Average number of pets
avg_pets = sum(info["number_of_pets"] for info in classmate_info.values()) / len(classmate_info)
print(f"Average number of pets: {avg_pets:.2f}")

# b) classmate who got the most sleep
most_sleep_classmate = max(classmate_info, key=lambda x: classmate_info[x].get("hours_of_sleep", 0))
print(f"classmate who got the most sleep: {most_sleep_classmate}")
```

### Task 6: Data Filtering

Create a new list containing only the classmates who have at least one pet.

```{python}
#| echo: true
#| include: true
classmates_with_pets = [name for name, info in classmate_info.items() if info["number_of_pets"] > 0]
print("classmates with pets:", classmates_with_pets)
```

## Part 4: Fun with Random Selections

Let's add a fun element to our exercise using the `random` module. Before we dive into the main task, let's look at how we can use the random library to select random items from a dictionary.

### Example: Random Selection from a Dictionary

Here's a simple example of how to select random items from a dictionary:

```{python}
#| echo: true
import random

# Sample dictionary
fruit_colors = {
    "apple": "red",
    "banana": "yellow",
    "grape": "purple",
    "kiwi": "brown",
    "orange": "orange"
}

# Select a single random key-value pair
random_fruit, random_color = random.choice(list(fruit_colors.items()))
print(f"Randomly selected fruit: {random_fruit}")
print(f"Its color: {random_color}")

# To get just a random key:
random_fruit = random.choice(list(fruit_colors.keys()))
print(f"Another randomly selected fruit: {random_fruit}")

# To select multiple random items:
num_selections = 3
random_fruits = random.sample(list(fruit_colors.keys()), num_selections)
print(f"Randomly selected {num_selections} fruits: {random_fruits}")
```

This example demonstrates how to:

1. Convert a dictionary to a list of key-value pairs or keys
2. Use `random.choice()` to select a single random item from a list
3. Use `random.sample()` to select multiple unique random items from a list

Note: `random.choice()` selects a single item, while `random.sample()` can select multiple unique items. For our snack-sharing task below, `random.sample()` might be more useful!


### Task 7: Random Snack Sharing

Create a function that randomly selects a classmate to share their snack with another random classmate. Print out the results as "Name will share [snack] with Name".

```python
#| echo: true
def assign_random_snacks(classmate_info):
    # Your code here
    print(f"{sharer} will share {snack} with {receiver}")

# Test your function
assign_random_snacks(classmate_info)
```

```{python}
#| echo: true
#| include: true
def assign_random_snacks(classmate_info):
    names = list(classmate_info.keys())
    [sharer, receiver] = random.sample(names, 2)
    print(f"{sharer} will share {classmate_info[sharer]['preferred_study_snack']} with {receiver}")

# Test the function
assign_random_snacks(classmate_info)
```

## Conclusion

Great job completing this exercise! You've practiced creating and manipulating lists and dictionaries, performed basic data analysis, and even created a fun random snack-sharing function. These skills will be invaluable as you continue your journey in Python programming and data science.

Remember, the key to mastering these concepts is practice. Feel free to modify this exercise with your own data or ideas to further reinforce your learning.

## Additional Resources

- [Python Lists (Python.org)](https://docs.python.org/3/tutorial/introduction.html#lists)
- [Python Dictionaries (Python.org)](https://docs.python.org/3/tutorial/datastructures.html#dictionaries)
- [Random Module (Python.org)](https://docs.python.org/3/library/random.html)

Don't forget to check out our course cheatsheets for quick reference on [lists](../cheatsheets/lists.qmd) and [dictionaries](../cheatsheets/dictionaries.qmd)!